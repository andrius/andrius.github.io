<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>//andrius.mobi</link>
    <description>
      This blog explores the realm of real-time voice applications, covering topics such as Unified Communications, CTI, and call centers. It also discusses open-source VoIP solutions like Asterisk, Freeswitch, and Kamailio, highlighting their features and benefits. Additionally, the blog touches upon automations, integrations, test automation, and the scalability of containerized applications using Docker, along with DevOps practices.
    </description>
    
        
            <item>
                <title>Register SIP account and receive calls with Twilio</title>
                <link>//andrius.mobi/2023/07/register-sip-account-and-receive-calls-with-twilio.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>I live in three different countries and have friends, family members, and colleagues in each of them. As a result, I need to maintain phone numbers in each country for 2FA, e-signatures, and making and receiving calls. Although I do not use all three SIM cards at the same time, it is still important to receive phone calls.</p>

<p>Years ago, I used to run Asterisk PBX on VPS, but I nuked it a while ago as I did not want to maintain one extra piece of software. The national phone numbers (DID’s) were purchased from various providers, and some time ago, I switched to Twilio.</p>

<p>Twilio offers multiple options to maintain calls, one of which is TwiML. Let’s dive into it!</p>

<p>ISSUES FIRST! At the moment of writing (July 2023), Twilio offers POP’s in the EU (ie1), USA (us1), and Australia (au1). The full support of capabilities is possible with the US pop or I haven’t fount the way to get it working with the European pop. I spent some time attempting to deliver calls to the SIP trunk that is registered in the EU zone with error “32002 Your TwiML tried to Dial a Twilio SIP Domain that can’t be found”. So please be warned, and if you end up getting the EU pop working, please drop me a message.</p>

<p>Here are the steps you need to follow to set up Twilio:</p>

<ol>
  <li>Go to https://console.twilio.com/us1/develop/voice/manage/cls and create your SIP credentials list. It is a list with a username-password match that you will need in the next step.</li>
  <li>Create a new SIP domain with a unique name at https://console.twilio.com/us1/develop/voice/manage/sip-domains. Enable SIP registration and select the credentials list you will use with this domain. Configure everything else (encryption, etc.).</li>
  <li>Create a TwiML bin with the following content at https://console.twilio.com/us1/develop/twiml-bins/twiml-bins:</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;Response&gt;</span>
  <span class="c">&lt;!-- Say&gt;Hello from Twilio!&lt;/Say --&gt;</span>

  <span class="nt">&lt;Dial</span> <span class="na">answerOnBridge=</span><span class="s">"true"</span> <span class="na">sequential=</span><span class="s">"true"</span> <span class="na">ringTone=</span><span class="s">"lt"</span> <span class="na">record=</span><span class="s">"record-from-answer-dual"</span> <span class="na">trim=</span><span class="s">"trim-silence"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Sip&gt;</span>USERNAME@YOURDOMAIN.sip.twilio.com;region=ie1<span class="nt">&lt;/Sip&gt;</span>
  <span class="nt">&lt;/Dial&gt;</span>

  <span class="c">&lt;!-- Simultaneous Dialing --&gt;</span>
  <span class="nt">&lt;Dial</span> <span class="na">answerOnBridge=</span><span class="s">"true"</span> <span class="na">ringTone=</span><span class="s">"es"</span> <span class="na">record=</span><span class="s">"record-from-answer-dual"</span> <span class="na">trim=</span><span class="s">"trim-silence"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Sip&gt;</span>USERNAME@YOURDOMAIN.sip.twilio.com;region=ie1<span class="nt">&lt;/Sip&gt;</span>
    <span class="nt">&lt;Number&gt;</span>+YOURNUMBER<span class="nt">&lt;/Number&gt;</span>
  <span class="nt">&lt;/Dial&gt;</span>

  <span class="nt">&lt;Say&gt;</span>Hello, YOURNAME cannot answer. Please leave a message at the beep.<span class="nt">&lt;/Say&gt;</span>

  <span class="nt">&lt;Record</span> <span class="na">timeout=</span><span class="s">"30"</span> <span class="na">transcribe=</span><span class="s">"true"</span> <span class="na">playBeep=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/Response&gt;</span>
</code></pre></div></div>

<ol>
  <li>Purchase a DID number at https://console.twilio.com/us1/develop/phone-numbers/manage/incoming and enter the inbound call routing section (A call comes in) to select the TwiML bin.</li>
  <li>Download a SIP client, such as Groundwire from Acrobits, and register it with Twilio using your username and password from the credentials list and the following registration domain: <a href="http://yourdomain.sip.twilio.com/">YOURDOMAIN.sip.twilio.com</a>.</li>
  <li>Test inbound calls. If a call does not work, navigate to the logs at https://console.twilio.com/us1/monitor/logs/debugger/errors.</li>
</ol>

<p>Now that everything is set up, redirect your phone calls to the Twilio DID number by dialing <code class="language-plaintext highlighter-rouge">*21*+YOUR-TWILIO-NUMBER#</code> on your mobile phone.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2023/07/register-sip-account-and-receive-calls-with-twilio.html</guid>
                <description>
                    
                    How to register your SIP softphone and receive inbound calls using Twilio
                    
                </description>
                <pubDate>Sat, 08 Jul 2023 13:35:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Properly terminate crystal-lang service in docker</title>
                <link>//andrius.mobi/2019/11/properly-terminate-crystal-lang-service-in-docker.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>Production-ready crystal application in docker must process correctly several
signals to shutdown properly. There is two commands in docker can be used to stop running container: <code class="language-plaintext highlighter-rouge">docker stop</code> and <code class="language-plaintext highlighter-rouge">docker kill</code>. First one, <code class="language-plaintext highlighter-rouge">docker stop</code> stops a running container by sending it SIGTERM signal, let the main process process it, and after a grace period uses SIGKILL to terminate the application.</p>

<p>In this article I’ll show how to process SIGING (Ctrl-C), SIGTERM and SIGKILL with Crystal-lang.</p>

<h2 id="download">Download</h2>

<p>It’s a part of my sandbox repository, <a href="https://github.com/andrius/sandbox/tree/develop/crystal/signal_trap">download it here</a>.</p>

<p>Not familiar with crystal-lang? <a href="https://github.com/andrius/sandbox/blob/develop/crystal-signal-trap/src/signal_trap.cr">This is the main file with business logic</a>.</p>

<h2 id="installation">Installation</h2>

<p>Everything is dockerised, just get docker installed and download git repository.</p>

<h2 id="usage">Usage</h2>

<p>For development-mode application run this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--pull</span> <span class="nt">--force-rm</span> <span class="se">\</span>
  <span class="nt">-t</span> crystal-signal-trap <span class="se">\</span>
  <span class="nt">--file</span> ./Dockerfile <span class="nb">.</span> <span class="se">\</span>
<span class="o">&amp;&amp;</span> docker run <span class="nt">-ti</span> <span class="nt">--rm</span> <span class="nt">--name</span><span class="o">=</span><span class="nb">trap </span>crystal-signal-trap
</code></pre></div></div>

<p>But most important is to get signals trap working in production-ready docker,
which is scratch, busybox or alpine-based. To test it, run following snippet:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--pull</span> <span class="nt">--force-rm</span> <span class="se">\</span>
  <span class="nt">-t</span> crystal-signal-trap <span class="se">\</span>
  <span class="nt">--file</span> ./Dockerfile-production <span class="nb">.</span> <span class="se">\</span>
<span class="o">&amp;&amp;</span> docker run <span class="nt">-ti</span> <span class="nt">--rm</span> <span class="nt">--name</span><span class="o">=</span><span class="nb">trap </span>crystal-signal-trap
</code></pre></div></div>

<h2 id="demo">Demo</h2>

<p><a href="https://asciinema.org/a/eIFSoH00QsLKpsfyypsL0i6cr"><img src="https://asciinema.org/a/eIFSoH00QsLKpsfyypsL0i6cr.svg" alt="asciicast" /></a></p>

<h2 id="i-want-to-process-signals-separately">I want to process signals separately!</h2>

<p>Instead of grouping signals trap as it’s <a href="https://github.com/andrius/sandbox/blob/develop/crystal/signal_trap/src/signal_trap.cr#L9-L16">made in the demo app</a>, it is possible just to process any of them:</p>

<div class="language-crystal highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="no">Signal</span><span class="o">::</span><span class="no">INT</span><span class="p">.</span><span class="nf">trap</span> <span class="k">do</span>
   <span class="c1"># Processing SIGING</span>
 <span class="k">end</span>
</code></pre></div></div>

<h2 id="more-signals">More signals?</h2>

<p>It is possible to send other signals with docker:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nb">kill</span> <span class="nt">--signal</span><span class="o">=</span>SIGHUP  my_container
</code></pre></div></div>

<p>In this case, Crystal-lang app shall catch that signal: <code class="language-plaintext highlighter-rouge">Signal::INT.trap { ... }</code>. Here is the <a href="https://crystal-lang.org/api/latest/Signal.html">list of known by Crystal-lang signals</a>.</p>

<hr />

<p>References:</p>

<ul>
  <li><a href="https://docs.docker.com/engine/reference/commandline/kill">docker kill command syntax</a>;</li>
  <li><a href="https://docs.docker.com/engine/reference/commandline/stop">docker stop command syntax</a>;</li>
  <li><a href="https://medium.com/@gchudnov/trapping-signals-in-docker-containers-7a57fdda7d86">Trapping signals in Docker containers</a>.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/11/properly-terminate-crystal-lang-service-in-docker.html</guid>
                <description>
                    
                    How to handle signals and properly terminate docker service written with the Crystal-lang.
                    
                </description>
                <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Create the smallest Crystal-lang docker image based on scratch</title>
                <link>//andrius.mobi/2019/10/Create-the-smallest-Crystal-lang-docker-image-based-on-scratch.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>Official <a href="https://hub.docker.com/r/crystallang/crystal/tags">Crystal-lang docker image</a> is Ubuntu-based and relatively big, but production-ready image could be tiny, if we will use docker multi-stage builds. The smallest image could be created using <a href="https://hub.docker.com/_/scratch">scratch</a> image, but if it’s needed to do some processing before actual code starts, <a href="https://hub.docker.com/_/busybox">busybox</a> or <a href="https://hub.docker.com/_/alpine">alpine</a> is recommended.</p>

<h2 id="dockerfile">Dockerfile</h2>

<p>Well, just compile app using crystal image and copy resulting binary to the scratch, like below:</p>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># vim:set ft=dockerfile:</span>
<span class="k">FROM</span><span class="s"> crystallang/crystal:0.31.1 as builder</span>

<span class="k">LABEL</span><span class="s"> maintainer="Andrius Kairiukstis &lt;****&gt;"</span>

<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> . .</span>

<span class="k">RUN </span>shards build <span class="nt">--production</span> <span class="nt">--progress</span> <span class="nt">--verbose</span> <span class="nt">--warnings</span><span class="o">=</span>all
<span class="k">RUN </span>ldd ./bin/app | <span class="nb">tr</span> <span class="nt">-s</span> <span class="s1">'[:blank:]'</span> <span class="s1">'\n'</span> | <span class="nb">grep</span> <span class="s1">'^/'</span> | <span class="se">\
</span>    xargs <span class="nt">-I</span> % sh <span class="nt">-c</span> <span class="s1">'mkdir -p $(dirname deps%); cp % deps%;'</span>
<span class="c"># RUN find ./deps/</span>

<span class="c">################################################################################</span>
<span class="k">FROM</span><span class="s"> scratch</span>

<span class="k">LABEL</span><span class="s"> maintainer="Andrius Kairiukstis &lt;****&gt;"</span>

<span class="c"># Dependences. That will fix DNS resolve issue in docker</span>
<span class="k">COPY</span><span class="s"> --from=builder /src/deps /</span>
<span class="k">COPY</span><span class="s"> --from=builder /lib/x86_64-linux-gnu/libnss_dns.so.* /lib/x86_64-linux-gnu/</span>
<span class="k">COPY</span><span class="s"> --from=builder /lib/x86_64-linux-gnu/libresolv.so.*  /lib/x86_64-linux-gnu/</span>

<span class="c"># app</span>
<span class="k">COPY</span><span class="s"> --from=builder /src/bin/app /app</span>

<span class="k">ENTRYPOINT</span><span class="s"> ["/app"]</span>
</code></pre></div></div>

<h2 id="crystal-lang-notes">Crystal-lang notes</h2>

<p>There is issues with DNS – see this <a href="https://github.com/crystal-lang/crystal/issues/2426">https://github.com/crystal-lang/crystal/issues/2426</a> and <a href="https://github.com/crystal-lang/crystal/issues/6099">https://github.com/crystal-lang/crystal/issues/6099</a>. The best way to resolve I’ve found is to <a href="https://gist.github.com/bcardiff/85ae47e66ff0df35a78697508fcb49af#gistcomment-2578255">copy libnss and libresolv files</a>.</p>

<p>I’ve also tried to compile with <code class="language-plaintext highlighter-rouge">--static</code> option, copying (and not) the DNS libraries (<code class="language-plaintext highlighter-rouge">libnss_dns.so</code> and <code class="language-plaintext highlighter-rouge">libresolv.so</code>), but did not get DNS working – that image is good only for listening services.</p>

<h2 id="result">Result</h2>

<p>Resulting image is tiny, only 10MB (and the smallest one is 6.25MB only, but DNS won’t working)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker image list dial_demo

# REPOSITORY             TAG                    IMAGE ID      CREATED         SIZE
# smallest-docker-image  scratch-ldd            d819bf2a43f3  21 minutes ago  10MB
# smallest-docker-image  scratch-static-no-dns  595afcfad6f0  13 minutes ago  6.25MB
</code></pre></div></div>

<h2 id="can-i-download-this">Can I download this?</h2>

<p>Sure. <a href="https://github.com/andrius/sandbox/tree/develop/crystal/smallest-docker-image">I’ve pushed stuff to my sandbox repository</a>. There is three Dockerfiles, for <a href="https://github.com/andrius/sandbox/tree/develop/crystal/smallest-docker-image/scratch/ldd">scratch</a> – 10MB, <a href="https://github.com/andrius/sandbox/tree/develop/crystal/smallest-docker-image/busybox/ldd">busybox</a> – 11.2MB and <a href="https://github.com/andrius/sandbox/tree/develop/crystal/smallest-docker-image/alpine/ldd">alpine linux</a> – 15.6MB.</p>

<hr />

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/10/Create-the-smallest-Crystal-lang-docker-image-based-on-scratch.html</guid>
                <description>
                    
                    How to use docker multi-stage builds to create a smallest by size Crystal-lang docker image.
                    
                </description>
                <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>All-in-one (Crystal-lang library that handle all the Asterisk PBX interfaces)</title>
                <link>//andrius.mobi/2019/10/all-in-one-asterisk-with-crysyal.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>I’ve created and open-sourced a Crystal-lang shard (library) that handle all the Asterisk PBX interfaces (ARI, AMI and all types of AGI). Get it here: <a href="https://github.com/ctiapps/asterisk">https://github.com/ctiapps/asterisk</a>.</p>

<h2 id="another-library">Another library?</h2>

<p>There were no <a href="https://crystalshards.xyz/?filter=voip">libraries for VoIP</a> with Crystal-lang so I’ve created my own.</p>

<p>Working on recent project we had a need to deal with AMI and ARI together, with a lot of async processing. Initial code were Ruby-based, but there it only single Ruby-gem for ARI and async support in Ruby is not the best one.</p>

<p>I really love <a href="https://crystal-lang.org">Crystal-lang</a>. It’s inspired by Ruby and I had no issues switching to it (however it is not Ruby, only syntax is more or less shared). It is fast, really fast, no lags, no delays! It compiles and resulting code is tiny, docker image with all the stuff packed-in is around 20MB in size. Before making decision I also have tried Elixir. Golang might be also an option, but after Ruby I don’t want to leave comfort zone ;)</p>

<h2 id="whats-in-a-box">What’s in a box?</h2>

<ul>
  <li>All the interfaces ARI, AMI, AGI, FastAGI and AsyncAGI;</li>
  <li><a href="https://github.com/ctiapps/asterisk/tree/develop/spec">Test specs using live Asterisk PBX (in a Docker)</a>. Specs also demonstrate how to use library, but more documentation is coming;</li>
  <li><a href="https://ctiapps.github.io/asterisk">Documentation</a>.</li>
</ul>

<hr />

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/10/all-in-one-asterisk-with-crysyal.html</guid>
                <description>
                    
                    I&apos;ve created and open-sourced a Crystal-lang shard (library) that handle all the Asterisk PBX interfaces (ARI, AMI and all types of AGI).
                    
                </description>
                <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>How to install software on firewalled server</title>
                <link>//andrius.mobi/2018/12/how-to-install-software-on-firewalled-server.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>Quick answer: Create a reverse SSH proxy:</p>

<p>Create a dynamic tunnel with command  <code class="language-plaintext highlighter-rouge">ssh -D 51010 localhost</code> — this command create a dynamic SSH proxy from your local machine;</p>

<p>Then SSH to the remote machine with command like this: <code class="language-plaintext highlighter-rouge">ssh -R 51010:127.0.0.1:51010 firewalled-server</code>. 
It will forward your dynamic SSH proxy to the remote machine, so you’ll get kind of a “poor man VPN” on it;</p>

<p>Finally install the software using the proxychains command (or update the apt.conf), see below.</p>

<h2 id="preparation">Preparation</h2>

<ul>
  <li>
    <p>At host machine open terminal and SSH to self, in order to create dynamic tunnel:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-D</span> 51010 localhost
</code></pre></div>    </div>
  </li>
  <li>
    <p>Now in new termial tab, SSH to the remote machine <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-R</span> 51010:127.0.0.1:51010 firewalled-server
</code></pre></div>    </div>
  </li>
  <li>
    <p>Check that everything works fine (I assume that curl is already installed):</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">ALL_PROXY</span><span class="o">=</span><span class="s2">"socks5://127.0.0.1:51010"</span> curl ifconfig.co
<span class="nv">ALL_PROXY</span><span class="o">=</span><span class="s2">"socks5h://127.0.0.1:51010"</span> curl ifconfig.co
</code></pre></div>    </div>
  </li>
</ul>

<p>If both commands was failed, check sshd settings on the firewalled server (does port forwarding enabled etc.), and if only the first command failed <sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>, then it looks that DNS resolution also firewalled</p>

<p>Almost ready!</p>

<h2 id="installing-packages">Installing packages</h2>

<p>There is two options available:</p>

<ul>
  <li>
    <p>“socksify” apt-get through proxychains <sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proxychains4 <span class="nt">-q</span> <span class="nt">-f</span> /home/user/.proxychains/proxychains.conf
apt-get <span class="nt">-yqq</span> <span class="nb">install </span>ngrep sngrep
</code></pre></div>    </div>
  </li>
  <li>
    <p>Or by creating entry in apt.conf file <sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup>:</p>

    <p>Setup proxy in <code class="language-plaintext highlighter-rouge">apt.conf</code></p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'Acquire::socks::Proxy "socks5h://127.0.0.1:51010/";'</span> <span class="se">\</span>
  <span class="o">&gt;&gt;</span> /etc/apt/apt.conf
</code></pre></div>    </div>

    <p>and then install packages with apt-get:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get <span class="nt">-yqq</span> <span class="nb">install </span>ngrep sngrep
</code></pre></div>    </div>

    <p>(Don’t forget to comment out or remove proxy directive in apt.conf after installation)</p>
  </li>
</ul>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Possible issues with <code class="language-plaintext highlighter-rouge">ssh -R</code>: <a href="https://serverfault.com/questions/595323/ssh-remote-port-forwarding-failed">https://serverfault.com/questions/595323/ssh-remote-port-forwarding-failed</a>; <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Check <a href="https://unix.stackexchange.com/questions/175888/curl-7-27-any-proxy-set-curl-does-not-resolve-the-hostname-via-proxy">https://unix.stackexchange.com/questions/175888/curl-7-27-any-proxy-set-curl-does-not-resolve-the-hostname-via-proxy</a>; <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>How to get proxychains on remote host: there is few dependencies for proxychains4: <a href="https://packages.debian.org/buster/proxychains4">https://packages.debian.org/buster/proxychains4</a>, if command is not installed, there is always an option just to <code class="language-plaintext highlighter-rouge">scp</code> necessary files and install them manually. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p>More options: <a href="https://askubuntu.com/questions/35223/syntax-for-socks-proxy-in-apt-conf">https://askubuntu.com/questions/35223/syntax-for-socks-proxy-in-apt-conf</a>. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/how-to-install-software-on-firewalled-server.html</guid>
                <description>
                    
                    How to use a reverse SSH proxy to install software on a server with outbound firewalls (gray zone ;) )
                    
                </description>
                <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Digital Ocean, Floating IP and VoIP</title>
                <link>//andrius.mobi/2018/12/digital-ocean-floating-ip-and-voip.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>Digital Ocean (<a href="https://m.do.co/c/492078597684">here is an referral link, claim your $100 credit</a>) were introduced <a href="https://www.digitalocean.com/docs/networking/floating-ips/overview/">floating IP</a> in the 2015, but I never use it with VoIP. Time to fix it.</p>

<p>(Dear hackers, at the moment of publishing all the IP addresses releases and data vanished)</p>
<h2 id="droplet-and-floating-ip">Droplet and floating IP</h2>
<p>Floating IP 206.189.246.114 pointed in the Digital Ocean console to the newly created droplet with Debian linux. IP addresses of test droplet:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@test:~# /sbin/ifconfig | <span class="nb">grep</span> <span class="nt">-B</span> 1 <span class="s1">'inet '</span>

eth0: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 206.189.20.174  netmask 255.255.240.0  broadcast 206.189.31.255
<span class="nt">--</span>
eth0:1: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 10.16.0.5  netmask 255.255.0.0  broadcast 10.16.255.255
</code></pre></div></div>
<h2 id="sip-configuration">SIP configuration</h2>
<p>For test purpose I’ve installed Asterisk from the OS repository (<code class="language-plaintext highlighter-rouge">apt-get install -yqq asterisk</code>) and configured  SIP client to register on 206.189.246.114. No luck as expected, SIP packets does not flowing properly:</p>

<p><img src="/images/floating-ip/1-failure.png" alt="/images/floating-ip/1-failure.png" /></p>

<p>Okay, lets try to update sip.conf with following. It’s typical setup for asterisk behind NAT (there is description notes in default sip.conf about externip, externhost and externaddr)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>externip=206.189.246.114
nat=force_rport,comedia
</code></pre></div></div>

<p>And get random results, but in most of cases SIP registration did not worked.</p>

<p><img src="/images/floating-ip/2-ok-but.png" alt="/images/floating-ip/2-ok-but.png" /></p>

<p>After quick investigation (why there is 3rd IP in the SIP dump), I decided to change SIP bind address to the private IP:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>udpbindaddr=10.16.0.5
tcpenable=yes
tcpbindaddr=10.16.0.5
; ...
externip=206.189.246.114
nat=force_rport,comedia
</code></pre></div></div>

<p>Now all right</p>

<p><img src="/images/floating-ip/3-ok.png" alt="/images/floating-ip/3-ok.png" /></p>

<p>Calls also working</p>

<p><img src="/images/floating-ip/4-call-ok.png" alt="/images/floating-ip/4-call-ok.png" /></p>
<h2 id="docker-setup">Docker setup</h2>
<p>Let’s try to get the same result with docker.</p>

<p>It works if asterisk can bind to the same private IP address where floating IP points, but requires to run container with <code class="language-plaintext highlighter-rouge">--net=host</code> option:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-ti</span> <span class="nt">--rm</span> <span class="se">\</span>
  <span class="nt">--net</span><span class="o">=</span>host <span class="se">\</span>
  <span class="nt">--name</span> asterisk <span class="se">\</span>
  <span class="nt">-v</span> /etc/asterisk/sip.conf:/etc/asterisk/sip.conf <span class="se">\</span>
  andrius/asterisk <span class="se">\</span>
  asterisk <span class="nt">-vvvddddc</span>
</code></pre></div></div>

<p>Technically that’s enough for most of use cases, but such Asterisk won’t fit well into development environment with docker-compose; other containers won’t “see” it. I’ll be digging this little bit more. Perhaps if I would pass NET_ADMIN capability or will start container in privileged mode, I would be able to do necessary trick with iptables.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/digital-ocean-floating-ip-and-voip.html</guid>
                <description>
                    
                    How to configure Digital Ocean&apos;s floating IP with VoIP, specifically with Asterisk, with Docker!
                    
                </description>
                <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Tiny docker image with ngrok</title>
                <link>//andrius.mobi/2018/12/tiny-docker-image-with-ngrok.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>I’ve found an excellent tiny Docker image for ngrok (wernight/ngrok). From now just using it to handle this blog.</p>

<p>Links at <a href="https://hub.docker.com/r/wernight/ngrok">Docker hub</a> and <a href="https://hub.docker.com/r/wernight/ngrok">Github</a>.</p>

<p>Some handy snippets. Note, it’s possible to use docker-compose commands, i.e. to check tunnels <code class="language-plaintext highlighter-rouge">curl $(docker-compose port ngrok 4040)/api/tunnels</code>, but I’m using <code class="language-plaintext highlighter-rouge">$(docker ps -l -q --filter "name=blog_ngrok")</code> statement to identify container ID, as it works with both docker-compose “up” and “run” modes and with docker without using docker-compose.</p>

<ul>
  <li>Logs</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">BLOG</span><span class="o">=</span><span class="si">$(</span>docker ps <span class="nt">-l</span> <span class="nt">-q</span> <span class="nt">--filter</span> <span class="s2">"name=blog_ngrok"</span><span class="si">)</span>
docker logs <span class="nt">-f</span> <span class="nv">$BLOG</span>
</code></pre></div></div>

<ul>
  <li>Check open ngrok tunnels</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">BLOG</span><span class="o">=</span><span class="si">$(</span>docker ps <span class="nt">-l</span> <span class="nt">-q</span> <span class="nt">--filter</span> <span class="s2">"name=blog_ngrok"</span><span class="si">)</span>
curl <span class="si">$(</span>docker port <span class="nv">$BLOG</span> 4040<span class="si">)</span>/api/tunnels
</code></pre></div></div>

<ul>
  <li>Open browser window with ngrok http console</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">BLOG</span><span class="o">=</span><span class="si">$(</span>docker ps <span class="nt">-l</span> <span class="nt">-q</span> <span class="nt">--filter</span> <span class="s2">"name=blog_ngrok"</span><span class="si">)</span>
open http://<span class="si">$(</span>docker port <span class="nv">$BLOG</span> 4040<span class="si">)</span>
</code></pre></div></div>

<p>It is how docker-compose file looks like for this Jekyll site:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>version: '3'

volumes:
  ruby-cache:
    driver: local

services:
  build:
    image: jekyll/jekyll
    volumes:
      - ruby-cache:/usr/local/bundle
      - ./:/srv/jekyll
    command: jekyll build

  jekyll:
    image: jekyll/jekyll
    volumes:
      - ruby-cache:/usr/local/bundle
      - ./:/srv/jekyll
    command: jekyll serve --incremental --watch
    ports:
      - 127.0.0.1:4000:4000

  ngrok:
    image: wernight/ngrok
    links:
      - jekyll
    stdin_open: true
    tty: true
    ports:
      - 127.0.0.1:4040:4040
    environment:
      - NGROK_REGION=eu
      - NGROK_AUTH=...
      - NGROK_SUBDOMAIN=...
      - NGROK_PROTOCOL=http
      - NGROK_PORT=jekyll:4000
</code></pre></div></div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/tiny-docker-image-with-ngrok.html</guid>
                <description>
                    
                    I&apos;ve found an excellent tiny Docker image for ngrok (wernight/ngrok). From now just using it to handle this blog.
                    
                </description>
                <pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Updated OPUS codec patch that supports Asterisk 11.11.0 and 12.2.5</title>
                <link>//andrius.mobi/2014/08/asterisk-opus-patch-for-11110.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>I have updated the OPUS codec patch that now supports Asterisk 11.11.0 and 12.2.5. I have tested it with VP8 in pass-through mode, and it works well. You can <a href="https://github.com/andrius/asterisk-opus">download it here</a>!</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2014/08/asterisk-opus-patch-for-11110.html</guid>
                <description>
                    
                </description>
                <pubDate>Fri, 08 Aug 2014 10:07:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>WebRTC with Asterisk 11?</title>
                <link>//andrius.mobi/2013/07/webrtc-with-asterisk-11.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>Tonight, I tried two WebRTC clients (<a href="http://jssip.net/">JsSIP</a> and <a href="http://sipml5.org/">sipML5</a>) with Asterisk 11. I was able to get both of them working for echo test calls with the ulaw (g711u) codec. However, when I called from WebRTC to the SIP softphone, there was only one-way audio.</p>

<p>To configure WebRTC, I followed the Asterisk wiki articles: <a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+WebRTC+Support">Asterisk WebRTC Support</a> and <a href="https://wiki.asterisk.org/wiki/display/AST/WebRTC+tutorial+using+SIPML5">WebRTC tutorial using SIPML5</a>.</p>

<p>Excited!</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/07/webrtc-with-asterisk-11.html</guid>
                <description>
                    
                    Tonight, I tried two WebRTC clients (JsSIP and sipML5) with Asterisk 11. I was able to get both of them working for echo test calls with the ulaw (g711u) codec. However, when I called from WebRTC to the SIP softphone, there was only one-way audio.
                    
                </description>
                <pubDate>Thu, 11 Jul 2013 11:38:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Roaming PBX update</title>
                <link>//andrius.mobi/2013/05/roaming-pbx-update.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>What’s new:</p>

<ul>
  <li>Asterisk 11.4</li>
  <li>SILK codec</li>
  <li>Watchdog to improve Raspberry Pi board performance and prevent deadlocks</li>
</ul>

<p>Download link: <a href="https://j.mp/tinypbx">j.mp/tinypbx</a>
Image name for this release: <code class="language-plaintext highlighter-rouge">raspbian_basic_wheezy_20130523.img.gz</code></p>

<p>Credentials: SSH (port 22), username: <code class="language-plaintext highlighter-rouge">root</code>, password: <code class="language-plaintext highlighter-rouge">raspberry</code>. Remember to update passwords after flashing and first boot!</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/05/roaming-pbx-update.html</guid>
                <description>
                    
                    What&apos;s new: Asterisk 11.4,  SILK codec,  watchdog to improve Raspberry Pi board performance and prevent deadlocks.
                    
                </description>
                <pubDate>Thu, 23 May 2013 23:30:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>First release of Roaming PBX</title>
                <link>//andrius.mobi/2013/05/roaming-pbx-first-release.html</link>
                <content:encoded>
                    <![CDATA[
                    Today, I created the latest image that includes Ruby, pcapsipdump, Asterisk PBX, and the SILK codec. Although it is still in the alpha stage, it is ready for testing. You can download the latest image from this [link](https://j.mp/tinypbx).

To flash the image onto a Raspberry Pi, follow the typical instructions: unzip the .gz file, insert the SD card, and use the Linux DD command to flash it. For a detailed guide on flashing, you can refer to [this site](http://www.andrewmunsell.com/blog/getting-started-raspberry-pi-install-raspbian/).

The [GIT repository with the script](https://github.com/andrius/build-raspbian-image) that creates RPI images has been updated. I will write a separate post with a more detailed description of it. In summary, the installer creates a minimal Raspbian image and, at the end, mounts the "delivery" folder to the target image and executes the bash script "[install.sh](http://install.sh/)" (you can find a sample of it in the GIT repository).

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/05/roaming-pbx-first-release.html</guid>
                <description>
                    
                    Today, I created the latest image that includes Ruby, pcapsipdump, Asterisk PBX, and the SILK codec. Although it is still in the alpha stage, it is ready for testing.
                    
                </description>
                <pubDate>Tue, 07 May 2013 21:32:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Creating your own custom image for Raspberry Pi</title>
                <link>//andrius.mobi/2013/04/creating-own-image-for-raspberry-pi.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>I wanted to create image builder for cross-compile environment, so say hello to it: <a href="//github.com/andrius/build-raspbian-image">https://github.com/andrius/build-raspbian-image</a>.</p>

<p>It’s based on <a href="https://blog.kmp.or.at/build-your-own-raspberry-pi-image/">blog post and code by Klaus Maria Pfeiffer</a>.</p>

<p>The code works perfectly on Debian (tested with CrunchBangLinux) and Ubuntu.</p>

<p>Instructions:</p>

<ul>
  <li>
    <p>git clone :)</p>
  </li>
  <li>
    <p>Check content and install packages or execute <code class="language-plaintext highlighter-rouge">./install.sh</code> script;</p>
  </li>
  <li>
    <p>execute <code class="language-plaintext highlighter-rouge">./raspbian/build_raspbian_sd_card.sh</code>, and soon you’ll get your IMG fine in the /tmp/rpi folder.</p>
  </li>
</ul>

<p>Main issue right now is cross-compilation environment. Unfortunately, I don’t have much time to automate process, so in a middle of cross-compilation, user have do it manually:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"execute all necessary commands, then type exit"</span>
<span class="nb">echo</span> <span class="s2">"asterisk install files located at /usr/src/asterisk"</span>
bash
</code></pre></div></div>
<h2 id="update">Update</h2>
<p>Github repository updated, now installation script mount delivery folder to target RPI image and execute <code class="language-plaintext highlighter-rouge">install.sh</code> script located in mounted folder. Now you could create your own build script or just type in <code class="language-plaintext highlighter-rouge">bash</code> in order to access command-line prompt during RPI image creation.</p>

<p>Below is image with Ruby 2.0 and Asterisk PBX:</p>

<p>Download link, containing latest TinyPBX image: <a href="//j.mp/tinypbx">j.mp/tinypbx</a>.</p>

<p>Flashing instructions are standard for RPI (<a href="//www.andrewmunsell.com/blog/getting-started-raspberry-pi-install-raspbian/">This site describing flashing procedure pretty well</a>)</p>

<ul>
  <li>gunzip .gz file</li>
  <li>insert SD card</li>
  <li>flash with Linux DD command…</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/04/creating-own-image-for-raspberry-pi.html</guid>
                <description>
                    
                    How to cross-compile a custom Raspberry Pi image and to build custom Asterisk PBX installation.
                    
                </description>
                <pubDate>Thu, 25 Apr 2013 21:59:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>SIP TCP vs UDP with mobile client: awesome results</title>
                <link>//andrius.mobi/2013/04/perfect-results-sip-tcp-vs-udp.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>Yes, I knew that TCP is better for mobile VoIP in terms of battery consumption, but I didn’t know how much better it would be! Yesterday, I replaced UDP with TCP on my Android softphone (Bria) and… Usually by this time (2:20 PM), my cellphone battery would be at 50% charge, but now it’s at 88 percent.</p>

<p>As for voice quality, I don’t notice any difference.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/04/perfect-results-sip-tcp-vs-udp.html</guid>
                <description>
                    
                </description>
                <pubDate>Tue, 02 Apr 2013 12:24:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Raspberry Pi: how to create your own image</title>
                <link>//andrius.mobi/2013/03/raspberry-pi-how-to-create-own-image.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>Currently I do developing my own Roaming VoIP PBX as a Raspberry Pi image, and have to rebuild project packages often. It is not best idea to compile packages right on Raspberry Pi. That would take hours. I was searching for a tool that can create image base — on my laptop or VPS.</p>

<p>Here is good starting point: <a href="http://blog.kmp.or.at/2012/05/build-your-own-raspberry-pi-image/">http://blog.kmp.or.at/2012/05/build-your-own-raspberry-pi-image/</a>, there is an <a href="http://www.kmp.or.at/~klaus/raspberry/build_rpi_sd_card.sh">shell script that will build image (right-click and select ‘download as’)</a>.</p>

<p>Some links about cross compilation and QEMU (QEMU for emulation and compilation on “Raspberry Pi” environment):</p>
<ul>
  <li>
    <p><a href="http://ffmpeg.org/trac/ffmpeg/wiki/How%20to%20compile%20FFmpeg%20for%20Raspberry%20Pi%20(Raspbian)">http://ffmpeg.org/trac/ffmpeg/wiki/How%20to%20compile%20FFmpeg%20for%20Raspberry%20Pi%20(Raspbian)</a>;</p>
  </li>
  <li>
    <p><a href="http://www.raspbian.org/RaspbianDocumentation">http://www.raspbian.org/RaspbianDocumentation”</a>;</p>
  </li>
  <li>
    <p><a href="http://hertaville.com/2012/09/28/development-environment-raspberry-pi-cross-compiler/">http://hertaville.com/2012/09/28/development-environment-raspberry-pi-cross-compiler/”</a>;</p>
  </li>
  <li>
    <p><a href="http://www.raspberrypiforums.com/forums/tutorials/article/16-a-raspberry-pi-emulated-environment-on-osx-lion/">http://www.raspberrypiforums.com/forums/tutorials/article/16-a-raspberry-pi-emulated-environment-on-osx-lion/”</a>;</p>
  </li>
  <li>
    <p><a href="http://xecdesign.com/qemu-emulating-raspberry-pi-the-easy-way/">http://xecdesign.com/qemu-emulating-raspberry-pi-the-easy-way/”</a>;</p>
  </li>
  <li>
    <p><a href="http://www.raspberrypi.org/phpBB3/viewtopic.php?f=29&amp;t=37386">http://www.raspberrypi.org/phpBB3/viewtopic.php?f=29&amp;t=37386”</a>;</p>
  </li>
  <li>
    <p><a href="http://igor.gold.ac.uk/~mas01mjy/wp/?p=95">http://igor.gold.ac.uk/~mas01mjy/wp/?p=95”</a>;</p>
  </li>
  <li>
    <p><a href="http://elinux.org/Rpi_kernel_compilation#Cross_compiling_from_OSX">http://elinux.org/Rpi_kernel_compilation#Cross_compiling_from_OSX”</a>.</p>
  </li>
</ul>

<h2 id="update-may-2013">Update (May 2013)</h2>

<p>While ago I’ve created a repository with a helpers: <a href="https://github.com/andrius/build-raspbian-image/">https://github.com/andrius/build-raspbian-image/</a>, check it out!</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/03/raspberry-pi-how-to-create-own-image.html</guid>
                <description>
                    
                    Currently I do developing my own Roaming VoIP PBX as a Raspberry Pi image, and have to rebuild project packages often. It is not best idea to compile packages right on Raspberry Pi. That would take hours. I was searching for a tool that can create image base - on my laptop or VPS.
                    
                </description>
                <pubDate>Fri, 22 Mar 2013 08:24:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Asterisk with silk8 and amr-nb codecs</title>
                <link>//andrius.mobi/2013/03/asterisk-with-silk8-and-amr-nb-codecs.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>As part of lab-project (roaming PBX), I’ve compiled SILK and AMR codecs for Asterisk. AMR by googling and researching and SILK following instructions <a href="https://github.com/mordak/codec_silk">in this repository: https://github.com/mordak/codec_silk</a>.</p>
<h2 id="update-20-march-2013">Update (20 March, 2013)</h2>
<p>Tested SILK8 (SILK-NB) on Android (with CSIPSimple and Bria) – it does not work well, quality is not fantastic definitaly. Have tried both versions: compiled by myself and official Digium SILK codec.</p>

<p>Testing AMR-NB!</p>
<h2 id="update-2-21-march-2013">Update #2 (21 March, 2013)</h2>
<p>SILK8 are okay with Bria @ android, I had to modify codecs.conf and put following code:</p>

<pre><code class="language-cfg">[silk8]
type=silk
samprate=8000
fec=true
packetloss_percentage=10
maxbitrate=20000 ; Default value was 10000
dtx=false        ; Encode using discontinuous transmission mode or not. Turning this
                 ; on will save bandwidth during periods of silence at the cost of
                 ; increased computational complexity. Off by default.
</code></pre>

<p>Have little issues with AMR-NB, will post update later.</p>
<h3 id="update-2-15-april-2013">Update #2 (15 April, 2013)</h3>
<p>AMR-NB works way better, I will try to describe installation steps in a separate post. Quality is amazing and bandwidth it consuming is so little. Unfortunately due to licensing issues it can’t be included as a part of official Asterisk distribution.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/03/asterisk-with-silk8-and-amr-nb-codecs.html</guid>
                <description>
                    
                    How to get Asterisk PBX working with SILK and AMR-NB codecs.
                    
                </description>
                <pubDate>Mon, 18 Mar 2013 23:11:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Debian installer (Asterisk and Adhearsion AGI framework)</title>
                <link>//andrius.mobi/2013/03/debian-installer-asterisk-and-agi.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>Here is a script that installs Asterisk PBX 11.x: with fax support, MySQL, Ruby, and Adhearsion AGI. Please run it as root. If you don’t need ImageMagick, you can remove the part that downloads and installs it.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># function to generate random password, on input requires an argument - lenght of password </span>
genpasswd<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">l</span><span class="o">=</span><span class="nv">$1</span>
  <span class="o">[</span> <span class="s2">"</span><span class="nv">$l</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">""</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nv">l</span><span class="o">=</span>20
  <span class="nb">tr</span> <span class="nt">-dc</span> A-Za-z0-9_ &lt; /dev/urandom | <span class="nb">head</span> <span class="nt">-c</span> <span class="k">${</span><span class="nv">l</span><span class="k">}</span> | xargs
<span class="o">}</span>

<span class="c"># MySQL default root password</span>
<span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span><span class="sb">`</span>genpasswd 16<span class="sb">`</span> <span class="c"># can be replaced by static text password</span>

<span class="c"># Remove MySQL with following commands (copy-paste to shell)</span>
<span class="c"># M=`dpkg -l|grep mysql|awk '{print $2}'|xargs`;apt-get -y purge ${M};rm -rf /etc/mysql;rm -rf /var/lib/mysql</span>

<span class="nv">MYSQL_SERVER_VERSION</span><span class="o">=</span><span class="sb">`</span>apt-cache showpkg mysql-server|grep <span class="s2">"Versions:"</span> <span class="nt">-A</span> 1|tail <span class="nt">--lines</span> 1|awk <span class="s1">'{print $1}'</span><span class="sb">`</span>
<span class="c"># tell installer about pre-set MySQL server password</span>
<span class="nb">echo</span> <span class="s2">"mysql-server-</span><span class="k">${</span><span class="nv">MYSQL_SERVER_VERSION</span><span class="k">}</span><span class="s2"> mysql-server/root_password password </span><span class="k">${</span><span class="nv">MYSQL_ROOT_PASSWORD</span><span class="k">}</span><span class="s2">"</span> <span class="se">\</span>
  | debconf-set-selections 
<span class="nb">echo</span> <span class="s2">"mysql-server-</span><span class="k">${</span><span class="nv">MYSQL_SERVER_VERSION</span><span class="k">}</span><span class="s2"> mysql-server/root_password_again password </span><span class="k">${</span><span class="nv">MYSQL_ROOT_PASSWORD</span><span class="k">}</span><span class="s2">"</span> <span class="se">\</span>
  | debconf-set-selections

<span class="c"># install necessary packages</span>
apt-get update
apt-get upgrade
apt-get <span class="nt">-y</span> <span class="nb">install </span>build-essential linux-headers-<span class="sb">`</span><span class="nb">uname</span> <span class="nt">-r</span><span class="sb">`</span> libxml2-dev libncurses-dev libnewt-dev <span class="se">\</span>
  openssl libreadline6 libreadline-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev <span class="se">\</span>
  libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison libtiff-dev <span class="se">\</span>
  libjpeg-progs libjpeg-dev libpng-dev mysql-server libmysqlclient-dev sqlite3 libsqlite3-dev <span class="se">\</span>
  wget rsync subversion

<span class="c"># create /usr/src if not exists</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> /usr/src
<span class="nb">cd</span> /usr/src

<span class="c"># download SpanDSP (need to support faxing)</span>
wget <span class="nt">--continue</span> http://soft-switch.org/downloads/spandsp/spandsp-0.0.6pre21.tgz

<span class="c"># download imagemagick (need to convert faxes)</span>
wget <span class="nt">--continue</span> http://www.imagemagick.org/download/ImageMagick-6.8.3-9.tar.gz

<span class="c"># download asterisk PBX</span>
wget <span class="nt">--continue</span> http://downloads.asterisk.org/pub/telephony/asterisk/asterisk-11.2.1.tar.gz

<span class="c"># unpack downloaded packages</span>
<span class="nb">tar</span> <span class="nt">-zxf</span> spandsp-0.0.6pre21.tgz
<span class="nb">tar</span> <span class="nt">-zxf</span> ImageMagick-6.8.3-9.tar.gz
<span class="nb">tar</span> <span class="nt">-zxf</span> asterisk-11.2.1.tar.gz

<span class="c"># dowlnoad asterisk add-ons</span>
<span class="nb">cd </span>asterisk-11.2.1
./contrib/scripts/get_ilbc_source.sh
./contrib/scripts/get_mp3_source.sh

<span class="c"># install imagemagick</span>
<span class="nb">cd</span> ../ImageMagick-6.8.3-9
./configure <span class="o">&amp;&amp;</span> make all <span class="o">&amp;&amp;</span> make <span class="nb">install</span>

<span class="c"># install spandsp</span>
<span class="nb">cd</span> ../spandsp-0.0.6
./configure <span class="o">&amp;&amp;</span> make all <span class="o">&amp;&amp;</span> make <span class="nb">install</span>

<span class="c"># install asterisk PBX</span>
<span class="nb">cd</span> ../asterisk-11.2.1
./configure <span class="o">&amp;&amp;</span> make all <span class="o">&amp;&amp;</span> make <span class="nb">install</span> <span class="o">&amp;&amp;</span> make samples <span class="o">&amp;&amp;</span> make config <span class="o">&amp;&amp;</span> make install-logrotate

<span class="c"># install asterisk utilities</span>
<span class="nb">cp</span> ./contrib/scripts/astcli /usr/local/bin/

<span class="c"># Automate asterisk service to run on startup.</span>
update-rc.d asterisk defaults

<span class="c"># install rvm and ruby</span>
curl <span class="nt">-L</span> get.rvm.io | bash <span class="nt">-s</span> stable
<span class="c"># to remove rvm do:</span>
<span class="c"># rvm implode</span>
<span class="nb">source</span> /etc/profile.d/rvm.sh
ldconfig 
rvm <span class="nb">install </span>1.9.3
gem <span class="nb">install</span> <span class="nt">--no-rdoc</span> <span class="nt">--no-ri</span> bundler sqlite3 mysql <span class="se">\</span>
  adhearsion adhearsion-activerecord adhearsion-asterisk adhearsion-drb adhearsion-rails adhearsion-xmpp

<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n\n\n\n</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"**************************************************************************************"</span>
<span class="nb">echo</span> <span class="s2">"  INSTALLATION DONE"</span>
<span class="nb">echo</span> <span class="s2">"  YOUR ROOT MYSQL PASSWORD IS </span><span class="k">${</span><span class="nv">MYSQL_ROOT_PASSWORD</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"  SAVE IT IN SAFE PLACE :)"</span>
<span class="nb">echo</span> <span class="s2">"**************************************************************************************"</span>
</code></pre></div></div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/03/debian-installer-asterisk-and-agi.html</guid>
                <description>
                    
                    Here is a script that installs Asterisk PBX 11.x: with fax support, MySQL, Ruby, and Adhearsion AGI.
                    
                </description>
                <pubDate>Thu, 14 Mar 2013 23:23:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Roaming PBX with Raspberry Pi, Asterisk and chan_dongle</title>
                <link>//andrius.mobi/2013/03/roaming-solution-based-on-raspberry-pi-asterisk-chan_dongle.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>As a frequent traveler, I understand the telecommunications needs of other travelers and citizens of the world. Recently, I decided to dedicate my free time to building a Roaming PBX solution.</p>

<p>Here’s my plan:</p>

<ul>
  <li>Create a Raspberry Pi image, possibly with an OpenWRT solution.</li>
  <li>Set up Asterisk PBX.</li>
  <li>Install asterisk chan_dongle, a driver for Huawei USB modems that handles two-way GSM calls.</li>
  <li>Use a VPN to bypass VoIP blocking in certain locations.</li>
  <li>Utilize the FreePBX GUI to manage dial plans.</li>
  <li>Configure Asterisk2billing to control expenses.</li>
  <li>Implement keep-alive scripts for monitoring.</li>
</ul>

<p>Anything else?</p>

<h3 id="update-19-march-2013">Update (19 March, 2013)</h3>

<p>I have successfully created an image file based on the standard Raspbian. Currently, I am busy working on a cross-compiler.</p>

<h3 id="update-2-6-may-2013">Update #2 (6 May, 2013)</h3>

<p>For those interested, you can download the latest image from this link: http://j.mp/tinypbx. Follow standard flashing instructions: gunzip the .gz file, insert the SD card, and flash it using the Linux DD command. You can find detailed instructions on how to flash the image on this site: <a href="http://www.andrewmunsell.com/blog/getting-started-raspberry-pi-install-raspbian/">http://www.andrewmunsell.com/blog/getting-started-raspberry-pi-install-raspbian/</a>, that provides a comprehensive description of the flashing procedure.</p>

<p>Additionally, I have created a side project that allows you to cross-compile anything and build your own image. You can find it at: <a href="https://github.com/andrius/build-raspbian-image">https://github.com/andrius/build-raspbian-image</a></p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/03/roaming-solution-based-on-raspberry-pi-asterisk-chan_dongle.html</guid>
                <description>
                    
                    As a frequent traveler, I understand the telecommunications needs of other travelers and citizens of the world. Recently, I decided to dedicate my free time to building a Roaming PBX solution.
                    
                </description>
                <pubDate>Tue, 12 Mar 2013 21:28:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Why you should create AGI?</title>
                <link>//andrius.mobi/2013/03/why-create-agi.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>The Asterisk dial-plan is a powerful tool for creating custom voice applications using its functions. The AEL (Asterisk Extension Language) provides a high-level view of standard expressions, similar to extensions.conf. With the dial-plan, you can manipulate database data through func_odbc, call Linux system scripts and process the results, send notifications to web applications using the curl function, and even send emails or jabber/google talk notifications.</p>

<p>However, there are situations where using AGI (Asterisk Gateway Interface) is preferred. Here are some reasons to consider using AGI:</p>

<ol>
  <li>Complex dial-plan: If your dial-plan is becoming complex with a growing number of macros and contexts, using AGI can help simplify and manage the code.</li>
  <li>Hosting multiple customers: If your system is hosted or clustered with various customers, each with different needs and functions, AGI can provide a more flexible and customizable solution.</li>
  <li>Integration with other applications: If you need to integrate with another application or web app, and process inbound events and send outbound events, AGI can facilitate the communication and data processing.</li>
  <li>Creating an API: AGI can be used to create an API that supports third-party applications, allowing them to interact with your Asterisk system.</li>
  <li>Accessing a database: If your application heavily relies on a database and requires permanent access to data, AGI can provide the necessary functionality.</li>
</ol>

<p>It’s important to keep in mind the “KISS principle” (Keep It Simple, Stupid). If a task can be resolved without using AGI, it’s recommended to use the dial-plan. However, if the dial-plan involves calling a lot of external shell scripts or requires more complex functionality, creating an AGI application may be a better approach.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/03/why-create-agi.html</guid>
                <description>
                    
                    In the world of Asterisk, the dial-plan is a powerful tool for creating custom voice applications. However, there are situations where using AGI (Asterisk Gateway Interface) is preferred. This article explores the reasons why AGI can be a valuable addition to your Asterisk system.
                    
                </description>
                <pubDate>Tue, 12 Mar 2013 21:07:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Click-to-call script for Windows users</title>
                <link>//andrius.mobi/2013/03/your-own-click-to-call-with-asterisk.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>Sharing one of my older projects with Asterisk: a click-to-call library with client and server components. It does work with Windows: Windows users could activate the <code class="language-plaintext highlighter-rouge">callto.rb</code> script, which could then be integrated with their CRM application. Once the script was started, the user’s SIP phone would ring. You can find the project here: https://github.com/andrius/asterisk-click-to-call-windows.</p>

<ul>
  <li>The client app, <code class="language-plaintext highlighter-rouge">callto.rb</code>, needs to be compiled into a Windows .exe file. Alternatively, it can be executed from the command line if Ruby is installed on Windows. For example, <a href="http://www.erikveen.dds.nl/rubyscript2exe">rubyscript2exe</a> can compile the Ruby script into an executable;</li>
  <li>Credentials should be populated within the <code class="language-plaintext highlighter-rouge">users.yml</code> file;</li>
  <li>The <code class="language-plaintext highlighter-rouge">server.rb</code> script should be running on Asterisk.</li>
</ul>

<p>The system is very simple, and I apologize for the lack of comments!</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/03/your-own-click-to-call-with-asterisk.html</guid>
                <description>
                    
                    Sharing one of my older projects with Asterisk: a click-to-call library with client and server components. It does work with Windows!
                    
                </description>
                <pubDate>Sun, 10 Mar 2013 12:23:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>How to unlock Huawei modem</title>
                <link>//andrius.mobi/2013/03/how-to-unlock-huawei-modem.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>After my last post about the GSM gateway based on Raspberry Pi and Huawei modem, I received a few questions asking how to unlock it.</p>

<p>Below is a YouTube video that describes the process:</p>

<p>https://youtu.be/uL-drV_ZniM</p>
<style>
.videoWrapper {
	position: relative;
	padding-bottom: 56.333%;
	height: 0;
    background: black;
}
.videoWrapper iframe {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
    border: 0;
}    
</style>

<script>
function get_youtube_id(url) {
    var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
    return (url.match(p)) ? RegExp.$1 : false;
}
function vimeo_embed(url,el) {
    var id = false;
    $.ajax({
      url: 'https://vimeo.com/api/oembed.json?url='+url,
      async: true,
      success: function(response) {
        if(response.video_id) {
          id = response.video_id;
          if(url.indexOf('autoplay=1') !== -1) var autoplay=1; else var autoplay=0;
          if(url.indexOf('loop=1') !== -1) var loop=1; else var loop=0;
          var theInnerHTML = '<div class="videoWrapper"><iframe src="https://player.vimeo.com/video/'+id+'/?byline=0&title=0&portrait=0';
          if(autoplay==1) theInnerHTML += '&autoplay=1';
          if(loop==1) theInnerHTML += '&loop=1';
          theInnerHTML += '" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>'; 
          el.innerHTML = theInnerHTML;
        }
      }
    });
}
function video_embed() {
    var p = document.getElementsByTagName('p');
    for(var i = 0; i < p.length; i++) {
        //check if this is an external url (that starts with https:// or http://
        if (p[i].innerHTML.indexOf("http://") == 0 ||
            p[i].innerHTML.indexOf("https://") == 0) {
            var youtube_id = get_youtube_id(p[i].innerHTML);
            if(youtube_id) {
                if(p[i].innerHTML.indexOf('autoplay=1') !== -1) var autoplay=1; else var autoplay=0;
                if(p[i].innerHTML.indexOf('loop=1') !== -1) var loop=1; else var loop=0;
                var theInnerHTML = '<div class="videoWrapper"><iframe width="720" height="420" src="https://www.youtube.com/embed/' + youtube_id + '?rel=0&showinfo=0';
                if(autoplay==1) theInnerHTML += '&autoplay=1';
                if(loop==1) theInnerHTML += '&loop=1&playlist='+youtube_id+'&version=3';
                theInnerHTML += '" frameborder="0" allowfullscreen></iframe></div>';
                p[i].innerHTML = theInnerHTML;
            }
            if(p[i].innerHTML.indexOf('vimeo.com') !== -1) {
                //ask vimeo for the id and place the embed
                vimeo_embed(p[i].innerHTML,p[i]);
            }
        }
    }
}
video_embed();

function mp3_embed() {
    var p = document.getElementsByTagName('p');
    for(var i = 0; i < p.length; i++) {
        if(p[i].innerHTML.indexOf('.mp3') !== -1) {
            var str = p[i].innerHTML.split('?');
            if(str.length == 1) str[1] = '';
            var str1 = str[1];
            str1 = str1.replace('&','').replace('&','');
            str1 = str1.replace('autoplay=1','').replace('autoplay=0','');
            str1 = str1.replace('loop=1','').replace('loop=0','');
            str1 = str1.replace('controls=0','').replace('controls=1','');

            if (str[0].lastIndexOf('.mp3', str[0].length - 4) === str[0].length - 4 && str1.length == 0) {
                if(str[1].indexOf('autoplay=1') !== -1) var autoplay=1; else var autoplay=0;
                if(str[1].indexOf('loop=1') !== -1) var loop=1; else var loop=0;
                if(str[1].indexOf('controls=0') !== -1) var controls=0; else var controls=1;
                var newInnerHTML = '<audio';
                if(autoplay==1) newInnerHTML += ' autoplay';
                if(loop==1) newInnerHTML += ' loop';
                if(controls==1) newInnerHTML += ' controls';
                newInnerHTML += '><source src="'+str[0]+'" type="audio/mpeg">Your browser does not support the audio element.</audio>';
                p[i].innerHTML = newInnerHTML;
            }
        }
    }
}
mp3_embed();
</script>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/03/how-to-unlock-huawei-modem.html</guid>
                <description>
                    
                    After my last post about the GSM gateway based on Raspberry Pi and Huawei modem, I received a few questions asking how to unlock it. Below is a YouTube video that describes the process.
                    
                </description>
                <pubDate>Sat, 09 Mar 2013 21:12:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Asterisk on Raspberry Pi as GSM gateway</title>
                <link>//andrius.mobi/2013/03/asterisk-on-raspberry-pi-as-gsm-gateway.html</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="introduction">Introduction</h2>

<p>Yesterday, I installed chan_dongle for my <a href="http://www.raspberry-asterisk.org/">Asterisk PBX running on Raspberry Pi</a>. <a href="https://github.com/jstasiak/asterisk-chan-dongle">chan_dongle</a> is a driver for Asterisk PBX that allows the use of certain Huawei 3G USB dongles as a voice “board” for handling voice, SMS, and USSD. It’s like creating your own single-channel GSM gateway.</p>

<p><img src="/images/raspberry-pi-with-dongle.png" alt="Raspberry PI with Huawei 3G dongle" /></p>

<h2 id="instructions">Instructions</h2>

<p>Follow these steps to set up chan_dongle:</p>

<ol>
  <li>Obtain a <a href="http://wiki.e1550.mobi/doku.php?id=requirements">compatible USB modem</a>.</li>
  <li>Use <a href="https://www.dc-unlocker.com/">DC-Unlocker software</a> to check if the modem has voice function and is not locked.</li>
  <li>If needed, unlock the modem by following the <a href="http://wiki.e1550.mobi/doku.php?id=preparation">unlock instructions and resources</a>.</li>
  <li>(Optional) If the DC-Unlocker indicates that the modem has no voice function or you encounter issues during configuration, try <a href="http://www.dc-files.com/files/huawei/">upgrading the firmware</a>.</li>
  <li>
    <p>Download <a href="http://www.raspberry-asterisk.org/downloads/">Raspberry-asterisk</a> and flash it onto an SD card (at least 4GB in size). Below are the instructions for flashing on macOS:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c"># Find your card (in my case, it's disk1)</span>
 mount /dev/disk1
 diskutil unmountDisk /dev/disk1
 <span class="nb">sudo dd </span><span class="k">if</span><span class="o">=</span>raspbian_wheezy_20120608.img <span class="nv">of</span><span class="o">=</span>/dev/rdisk1 <span class="nv">bs</span><span class="o">=</span>1m
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="installation">Installation</h2>

<p>Once you have the flashed SD card, power on the Raspberry Pi and follow these steps:</p>

<ol>
  <li>
    <p>Upgrade the system by running the command:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> raspbx-upgrade
</code></pre></div>    </div>
  </li>
  <li>
    <p>Install the necessary software:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> apt-get <span class="nb">install </span>usbutils unzip autoconf automake

 <span class="c"># Compile USB-modeswitch</span>
 <span class="nb">cd</span> /usr/src/

 wget http://www.draisberghof.de/usb_modeswitch/usb-modeswitch-1.2.5.tar.bz2
 wget http://www.draisberghof.de/usb_modeswitch/usb-modeswitch-data-20121109.tar.bz2

 <span class="nb">tar</span> <span class="nt">-jxvf</span> usb-modeswitch-1.2.5.tar.bz2
 <span class="nb">tar</span> <span class="nt">-jxvf</span> usb-modeswitch-data-20121109.tar.bz2

 <span class="nb">cd </span>usb-modeswitch-1.2.5
 make all
 make <span class="nb">install

 cd</span> ../usb-modeswitch-data-20121109
 make <span class="nb">install

 cd</span> ..
</code></pre></div>    </div>
  </li>
  <li>
    <p>Plug in the Huawei USB stick (if already plugged, eject it first) and check the output of the <code class="language-plaintext highlighter-rouge">lsusb</code> command:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> lsusb | <span class="nb">grep </span>Huawei
</code></pre></div>    </div>

    <p>The output should resemble:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Bus 001 Device 005: ID 12d1:140c Huawei Technologies Co., Ltd.
</code></pre></div>    </div>
  </li>
  <li>
    <p>Switch the USB-stick to modem mode. Use the values obtained from the previous step (<code class="language-plaintext highlighter-rouge">v</code> and <code class="language-plaintext highlighter-rouge">p</code> flags) and perform a Google search for your modem model and brand to find the value for the <code class="language-plaintext highlighter-rouge">M</code> flag.</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> usb_modeswitch <span class="nt">-v</span> 0x12d1 <span class="nt">-p</span> 0x140c <span class="nt">-H</span> <span class="nt">-s</span> 5 <span class="nt">-M</span> 55534243000000000000000000000011060000000000000000000000000000
</code></pre></div>    </div>
  </li>
  <li>
    <p>Download and install chan_dongle:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> wget https://github.com/jstasiak/asterisk-chan-dongle/archive/asterisk11.zip

 unzip asterisk11.zip

 <span class="nb">cd </span>asterisk-chan-dongle-asterisk11/
 aclocal
 autoconf
 automake <span class="nt">-a</span>
 ./configure
 make all
 make <span class="nb">install
 cp </span>etc/dongle.conf /etc/asterisk/
 <span class="nb">cp</span> /etc/extensions.conf /etc/asterisk/extensions-dongle.conf
</code></pre></div>    </div>
  </li>
  <li>
    <p>Restart Asterisk PBX and check the modem status:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> asterisk <span class="nt">-rx</span> <span class="s2">"core restart now"</span>

 <span class="c"># Check devices</span>
 asterisk <span class="nt">-rx</span> <span class="s2">"dongle show devices"</span>
</code></pre></div>    </div>

    <p>You should see something like this:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> # *CLI&gt; dongle show devices
 # ID           Group State      RSSI Mode Submode Provider Name  Model      Firmware          IMEI             IMSI             Number
 # dongle0      0     Free       2    0    0       Yoigo          E1762      11.126.13.00.00   xxxx yyy  Unknown
 # *CLI&gt;
</code></pre></div>    </div>
  </li>
</ol>

<p>That’s it! You have successfully installed and configured chan_dongle. The next step is to configure your new GSM gateway.</p>

<p>I am still experimenting with this device, but so far, the quality has been good and better than what I experienced with the Portech GSM gateway. The price per port is also more favorable, and it can send and receive SMS and USSD.</p>

<p>Good luck!</p>

<p>If you want to try my system, you can download the latest image <a href="https://j.mp/tinypbx">here</a>. The flashing instructions are the same as for any Raspberry Pi image: gunzip the .gz file, insert the SD card, and flash it using the Linux DD command. For example, you can refer to <a href="https://www.andrewmunsell.com/blog/getting-started-raspberry-pi-install-raspbian">this resource</a> for detailed flashing procedures.</p>

<h2 id="useful-links">Useful Links</h2>

<ul>
  <li><a href="http://wiki.e1550.mobi/doku.php?id=usage">Asterisk CLI commands to control dongle and additional instructions</a>;</li>
  <li><a href="http://gix.net.pl/raspberry-pi/">Another resource regarding dongle with Raspberry Pi</a>;</li>
  <li><a href="http://habrahabr.ru/post/160299/">Useful resource about chan_dongle (in Russian language, use google translate)</a>;</li>
  <li><a href="http://wiki.e1550.mobi/doku.php?id=troubleshooting">How to troubleshoot your Huawei modem</a>.</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/03/asterisk-on-raspberry-pi-as-gsm-gateway.html</guid>
                <description>
                    
                    Yesterday, I installed chan_dongle for my Asterisk PBX running on Raspberry Pi. chan_dongle is a driver that enables the use of Huawei 3G USB dongles as a voice &quot;board&quot; for handling voice, SMS, and USSD. I conducted extensive research on various topics and summarized everything in a document. Additionally, I provided useful links related to Asterisk CLI commands, troubleshooting Huawei modems, and additional resources for chan_dongle.
                    
                </description>
                <pubDate>Tue, 05 Mar 2013 19:50:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Time based conditions in voice application</title>
                <link>//andrius.mobi/2013/02/time-based-conditions-in-agi-application.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>The typical telephony system processes incoming call-flow based on different times, and customers want to have control over this and handle time-ranges. The whole platform can be a multi-tenant server with different virtual PBXes.</p>

<p>Here are the different call-handling scenarios based on time:</p>

<ul>
  <li>During the night, calls should be delivered to the voicemail.</li>
  <li>In the morning, lunchtime, and evening, calls should be forwarded to the cell phone.</li>
  <li>During business hours, calls should be processed following standard call-flow logic.</li>
  <li>On Fridays, the working hours are shorter.</li>
  <li>On Saturdays, the company works only until lunchtime.</li>
  <li>On Sundays, the company is closed, and calls should be routed to the voicemail.</li>
  <li>Calls on public holidays should also be forwarded to the voicemail.</li>
</ul>

<p>A long time ago, I created the following Ruby classes and ActiveRecord migrations for flexible business time management. I am now sharing this, as it could be useful for anyone dealing with time conditions in backend applications, not just telephony-related ones.</p>

<p>The “Item” class is a polymorphic association that points to any voice-related entity in a PBX. By reusing polymorphic database associations, it is possible to create very flexible call flow building blocks. These blocks can point to any voice-related entity in a PBX, such as an extension, voicemail, conference, etc. This allows for customizable and dynamic call handling based on time conditions.</p>

<p>If we trigger the “operational?” method for a given business-time collection, it should return the “item_id” or nil if the time conditions are not met (i.e., the office is closed).</p>

<h3 id="tests">Tests</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.9.3-p327 :001 &gt; Campaign.last.business_time.operational?

Campaign Load (0.1ms)  SELECT "campaigns".* FROM "campaigns" ORDER BY "campaigns"."id" DESC LIMIT 1
BusinessTime Load (0.2ms)  SELECT "business_times".* FROM "business_times" WHERE "business_times"."id" = 1 LIMIT 1
BusinessTimeMember Load (0.3ms)  SELECT "business_time_members".* FROM "business_time_members" WHERE "business_time_members"."business_time_id" = 1 ORDER BY
  business_time_id,
  day_of_month desc,
  month desc,
  year desc,
  weekday desc,
  time_from desc,
  time_to asc

=&gt; 0
</code></pre></div></div>
<h3 id="migrations">Migrations</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">create_table</span> <span class="ss">:business_time_members</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
	<span class="n">t</span><span class="p">.</span><span class="nf">string</span>   <span class="ss">:name</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">100</span>
	<span class="n">t</span><span class="p">.</span><span class="nf">integer</span>  <span class="ss">:business_time_id</span>
	<span class="n">t</span><span class="p">.</span><span class="nf">time</span>     <span class="ss">:time_from</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="s1">'2000-01-01 00:00:00'</span>
	<span class="n">t</span><span class="p">.</span><span class="nf">time</span>     <span class="ss">:time_to</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="s1">'2000-01-01 23:59:59'</span>
	<span class="n">t</span><span class="p">.</span><span class="nf">integer</span>  <span class="ss">:weekday</span>      <span class="c1"># 0 - sunday, 1 - monday, 2 -tuesday, ...</span>
	<span class="n">t</span><span class="p">.</span><span class="nf">integer</span>  <span class="ss">:day_of_month</span> <span class="c1"># 1-31</span>
	<span class="n">t</span><span class="p">.</span><span class="nf">integer</span>  <span class="ss">:month</span>        <span class="c1"># 1-12</span>
	<span class="n">t</span><span class="p">.</span><span class="nf">integer</span>  <span class="ss">:year</span>         <span class="c1"># 2012</span>
	<span class="n">t</span><span class="p">.</span><span class="nf">integer</span>  <span class="ss">:item_id</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="mi">0</span>      <span class="c1"># item with action!</span>
	<span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
<span class="k">end</span>

<span class="n">create_table</span> <span class="ss">:business_times</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
	<span class="n">t</span><span class="p">.</span><span class="nf">string</span>  <span class="ss">:name</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">100</span>
	<span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
<span class="k">end</span>

<span class="n">execute</span> <span class="s2">"INSERT INTO `business_times` (`id`, `name`)
	VALUES (1, 'Call Mon-Fri 9 to 21; Sat, Sun 11 to 19')"</span>

<span class="c1"># Always closed!</span>
<span class="c1"># It is a default condition with lowest priority and will be executed it other conditions did not met.</span>
<span class="c1"># BusinessTimeMember.create :business_time =&gt; business_time, :item =&gt; closed_action</span>
<span class="n">execute</span> <span class="s2">"INSERT INTO `business_time_members` (`id`, `business_time_id`, `item_id`) VALUES (?, 1, NULL)"</span>
<span class="c1"># Make calls on business days (Monday to Friday) from 9:00 to 21:00,</span>
<span class="c1"># on weekends (Sunday and Saturday) from 11:00 to 19:00</span>
<span class="c1"># 0 - Sun, 6 - Sat</span>
<span class="mi">0</span><span class="p">.</span><span class="nf">upto</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">day</span><span class="o">|</span>
	<span class="n">time_from</span><span class="p">,</span> <span class="n">time_to</span> <span class="o">=</span> <span class="k">if</span> <span class="n">day</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">day</span> <span class="o">==</span> <span class="mi">6</span> <span class="k">then</span>
		<span class="c1">#[Time.parse("11:00:00"), Time.parse("18:59:59")]</span>
		<span class="p">[</span><span class="no">Time</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s2">"00:00:00"</span><span class="p">),</span> <span class="no">Time</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s2">"23:59:59"</span><span class="p">)]</span>
	<span class="k">else</span>
		<span class="c1">#[Time.parse("9:00:00"), Time.parse("20:59:59")]</span>
		<span class="p">[</span><span class="no">Time</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s2">"00:00:00"</span><span class="p">),</span> <span class="no">Time</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s2">"23:59:59"</span><span class="p">)]</span>
	<span class="k">end</span>

	<span class="c1"># item_id 0 = continue dialplan!</span>
	<span class="c1"># BusinessTimeMember.create :business_time =&gt; business_time,</span>
	<span class="c1">#   :item_id =&gt; 0, :weekday =&gt; day,</span>
	<span class="c1">#   :time_from =&gt; "6:00", :time_to =&gt; "17:00"</span>
	<span class="n">execute</span> <span class="s2">"INSERT INTO `business_time_members`
		(`id`, `business_time_id`, `weekday`, `time_from`, `time_to`, `item_id`)
		VALUES (?, 1, </span><span class="si">#{</span><span class="n">day</span><span class="si">}</span><span class="s2">, '</span><span class="si">#{</span><span class="n">time_from</span><span class="si">}</span><span class="s2">', '</span><span class="si">#{</span><span class="n">time_to</span><span class="si">}</span><span class="s2">', 0)"</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="models">Models</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BusinessTimeMember</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="c1">#validations</span>
  <span class="n">validates_presence_of</span> <span class="ss">:business_time_id</span>
  <span class="n">validates_presence_of</span> <span class="ss">:item_id</span>
  <span class="c1"># 0 (zero) means to continue dialplan after check!</span>
  <span class="n">validates_numericality_of</span> <span class="ss">:item_id</span> <span class="c1">#, :greater_than =&gt; 0</span>

  <span class="c1"># relations</span>
  <span class="n">belongs_to</span> <span class="ss">:business_time</span>
  <span class="n">belongs_to</span> <span class="ss">:item</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">BusinessTime</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:business_time_members</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
  <span class="n">has_many</span> <span class="ss">:items</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:routable</span>

  <span class="n">has_many</span> <span class="ss">:soho_pbxes</span>

  <span class="c1"># return false if no records found,</span>
  <span class="c1"># 0 if specified - means "continue" dialplan,</span>
  <span class="c1"># or item_id</span>
  <span class="k">def</span> <span class="nf">operational?</span><span class="p">(</span><span class="n">details</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:datetime</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">utc</span> <span class="p">})</span>
    <span class="n">d</span> <span class="o">=</span> <span class="n">details</span><span class="p">[</span><span class="ss">:datetime</span><span class="p">]</span>

    <span class="k">begin</span>
      <span class="k">if</span> <span class="nb">self</span><span class="p">.</span><span class="nf">timezone</span>
        <span class="k">begin</span>
          <span class="n">tz</span> <span class="o">=</span> <span class="no">TZInfo</span><span class="o">::</span><span class="no">Timezone</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="nf">timezone</span><span class="p">)</span>
          <span class="n">local</span> <span class="o">=</span> <span class="n">tz</span><span class="p">.</span><span class="nf">utc_to_local</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
          <span class="nb">puts</span> <span class="s2">"got timezone </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">timezone</span><span class="si">}</span><span class="s2"> - utc </span><span class="si">#{</span><span class="n">d</span><span class="si">}</span><span class="s2">, local </span><span class="si">#{</span><span class="n">local</span><span class="si">}</span><span class="s2">"</span>
          <span class="n">d</span> <span class="o">=</span> <span class="n">local</span>
        <span class="k">rescue</span>
          <span class="nb">puts</span> <span class="s2">"got exception for timezone </span><span class="si">#{</span><span class="nb">self</span><span class="p">.</span><span class="nf">timezone</span><span class="si">}</span><span class="s2">"</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">tm</span> <span class="o">=</span> <span class="no">BusinessTimeMember</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span>
      <span class="ss">:all</span><span class="p">,</span>
      <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:business_time_id</span> <span class="o">=&gt;</span> <span class="nb">id</span> <span class="p">},</span>
      <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s2">"
        business_time_id,
        day_of_month desc,
        month desc,
        year desc,
        weekday desc,
        time_from desc,
        time_to asc
      "</span>
    <span class="p">)</span>

    <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">tm</span><span class="p">.</span><span class="nf">empty?</span>
    <span class="n">tm</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">tf</span> <span class="o">=</span> <span class="n">t</span><span class="p">[</span><span class="ss">:time_from</span><span class="p">]</span> <span class="p">?</span> <span class="no">Time</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="ss">:time_from</span><span class="p">].</span><span class="nf">strftime</span><span class="p">(</span><span class="s2">"%H:%M:%S"</span><span class="p">))</span> <span class="p">:</span> <span class="no">Time</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s2">"00:00:00"</span><span class="p">)</span>
      <span class="n">tt</span> <span class="o">=</span> <span class="n">t</span><span class="p">[</span><span class="ss">:time_to</span><span class="p">]</span> <span class="p">?</span> <span class="no">Time</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="ss">:time_to</span><span class="p">].</span><span class="nf">strftime</span><span class="p">(</span><span class="s2">"%H:%M:%S"</span><span class="p">))</span> <span class="p">:</span> <span class="no">Time</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s2">"23:59:59"</span><span class="p">)</span>
      <span class="n">tw</span> <span class="o">=</span> <span class="n">t</span><span class="p">[</span><span class="ss">:weekday</span><span class="p">]</span> <span class="p">?</span> <span class="n">t</span><span class="p">[</span><span class="ss">:weekday</span><span class="p">].</span><span class="nf">to_i</span> <span class="p">:</span> <span class="n">d</span><span class="p">.</span><span class="nf">wday</span>
      <span class="n">td</span> <span class="o">=</span> <span class="n">t</span><span class="p">[</span><span class="ss">:day_of_month</span><span class="p">]</span> <span class="p">?</span> <span class="n">t</span><span class="p">[</span><span class="ss">:day_of_month</span><span class="p">].</span><span class="nf">to_i</span> <span class="p">:</span> <span class="n">d</span><span class="p">.</span><span class="nf">day</span>
      <span class="n">tm</span> <span class="o">=</span> <span class="n">t</span><span class="p">[</span><span class="ss">:month</span><span class="p">]</span> <span class="p">?</span> <span class="n">t</span><span class="p">[</span><span class="ss">:month</span><span class="p">].</span><span class="nf">to_i</span> <span class="p">:</span> <span class="n">d</span><span class="p">.</span><span class="nf">month</span>
      <span class="n">ty</span> <span class="o">=</span> <span class="n">t</span><span class="p">[</span><span class="ss">:year</span><span class="p">]</span> <span class="p">?</span> <span class="n">t</span><span class="p">[</span><span class="ss">:year</span><span class="p">].</span><span class="nf">to_i</span> <span class="p">:</span> <span class="n">d</span><span class="p">.</span><span class="nf">year</span>

      <span class="k">if</span> <span class="n">ty</span> <span class="o">==</span> <span class="n">d</span><span class="p">.</span><span class="nf">year</span> <span class="o">&amp;&amp;</span> <span class="n">tm</span> <span class="o">==</span> <span class="n">d</span><span class="p">.</span><span class="nf">month</span> <span class="o">&amp;&amp;</span> <span class="n">td</span> <span class="o">==</span> <span class="n">d</span><span class="p">.</span><span class="nf">day</span> <span class="o">&amp;&amp;</span> <span class="n">tw</span> <span class="o">==</span> <span class="n">d</span><span class="p">.</span><span class="nf">wday</span> <span class="o">&amp;&amp;</span> <span class="n">d</span> <span class="o">&gt;=</span> <span class="n">tf</span> <span class="o">&amp;&amp;</span> <span class="n">d</span> <span class="o">&lt;=</span> <span class="n">tt</span> <span class="k">then</span>
        <span class="k">return</span> <span class="n">t</span><span class="p">.</span><span class="nf">item_id</span>
      <span class="k">end</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kp">false</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/02/time-based-conditions-in-agi-application.html</guid>
                <description>
                    
                    The typical telephony system processes incoming call flows based on different times. Customers want to have control over this and handle time ranges. The platform can also be a multi-tenant server with different virtual PBXes. In my implementation, I use Ruby, ActiveRecord, and polymorphic associations to create routing blocks. By reusing polymorphic database associations, I can create flexible call flow building blocks. These blocks can be linked to any voice-related entity in a PBX, such as an extension, voicemail, conference, etc. This enables customizable and dynamic call handling based on time conditions.
                    
                </description>
                <pubDate>Fri, 22 Feb 2013 22:54:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Delete voice recordings older than N-days</title>
                <link>//andrius.mobi/2013/02/delete-voice-recordings-older-than-n-days.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>Disk space is running out quickly in loaded telephony systems with instant call recording or heavy usage of voicemail. It’s good to purge them on a regular basis.</p>

<p>Create an executable bash file and put it in the <code class="language-plaintext highlighter-rouge">cron.daily</code> directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>
<span class="nb">cd</span> /var/spool/asterisk/monitor

<span class="c"># replace rm -f if you want to do other file </span>
<span class="c"># manipulations, i.e. backup first...</span>
find <span class="nb">.</span> <span class="nt">-mtime</span> +31 <span class="nt">-exec</span> <span class="nb">rm</span> <span class="nt">-f</span> <span class="o">{}</span> <span class="se">\;</span>
</code></pre></div></div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/02/delete-voice-recordings-older-than-n-days.html</guid>
                <description>
                    
                    Disk space running out fast in loaded telephony systems with instant call recording  or either with heavy usage of voicemail. It&apos;s good to purge them on regular basis.
                    
                </description>
                <pubDate>Fri, 22 Feb 2013 09:30:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Questionnaire application with Asterisk PBX AGI + Ruby</title>
                <link>//andrius.mobi/2013/02/questionnaire-with-asterisk-pbx-agi-ruby.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>There are several Ruby AGI implementations available, with the best one being <a href="https://github.com/adhearsion/adhearsion">Adhearsion</a> at the moment. I frequently use it for my current projects. While it is a great tool, it can sometimes be too large and restrict flexibility to some extent.</p>

<p>Before using Adhearsion, I used another implementation called <a href="https://github.com/andrius/AsteriskRuby">AsteriskRuby</a>. It provides AGI and FastAGI connections with Asterisk, and when combined with <a href="https://github.com/andrius/rastman">Rastman</a>, it allows access to the Asterisk Manager Interface (AMI). This combination serves as a versatile Swiss army knife. I love both implementations for their simplicity. They make it easy to execute Asterisk commands, receive AMI events, and troubleshoot issues, even for non-Ruby users. The performance is excellent, with no memory leaks, and the libraries are simple and flexible.</p>

<p>Back to the topic, the Questionnaire application. It has been in production for a while, initially developed for a small project, and now I have decided to share it with the VoIP community. The application is based on the AsteriskRuby gem.</p>

<p>The code was developed using Asterisk 1.6.x/1.8.x and Ruby 1.8.x.</p>

<p>To get it working, follow these steps:</p>

<ul>
  <li>Set up the code on a local server with Asterisk.</li>
  <li>Create a file named <code class="language-plaintext highlighter-rouge">codes.txt</code> containing phone numbers and PIN codes. Additionally, prepare a few voice recordings (you can find the filenames and messages in the application source code).</li>
  <li>Update the <code class="language-plaintext highlighter-rouge">extensions.conf</code> file and point the extension to the FastAGI.</li>
</ul>

<p>Here’s how the application works:</p>

<ul>
  <li>For new callers, the system will play a welcome announcement. For returning callers, it will play a “welcome back” announcement (caller authentication is based on the caller ID number and PIN).</li>
  <li>The application will prompt the caller to enter a PIN code.</li>
  <li>Upon successful authentication, the system will continue from the last unanswered question (or start with the first question for new callers).</li>
  <li>There is no limit to the number of attempts, and the answers and the number of calls are stored in the database.</li>
</ul>

<p>Below is the source code for the FastAGI implementation in Ruby:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/bin/env ruby</span>

<span class="nb">require</span> <span class="s1">'rubygems'</span>
<span class="nb">require</span> <span class="s1">'mysql'</span>
<span class="nb">require</span> <span class="s1">'active_record'</span>
<span class="nb">require</span> <span class="s1">'AGIServer'</span>
<span class="nb">require</span> <span class="s1">'AGIMenu'</span>
<span class="nb">require</span> <span class="s1">'AGISelection'</span>
<span class="nb">require</span> <span class="s1">'daemons'</span>

<span class="no">APP_ROOT</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">expand_path</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="kp">__FILE__</span><span class="p">))</span>

<span class="c1"># Questionnaire / voting is statis and here we have a list of correct answers</span>
<span class="no">CORRECT_ANSWERS</span> <span class="o">=</span> <span class="sx">%w(2 3 2 1 3 1 1 1 1 3)</span>

<span class="c1"># database credentials</span>
<span class="no">DATABASE</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:adapter</span> <span class="o">=&gt;</span> <span class="ss">:mysql</span><span class="p">,</span>
  <span class="ss">:encoding</span> <span class="o">=&gt;</span> <span class="ss">:utf8</span><span class="p">,</span>
  <span class="ss">:database</span> <span class="o">=&gt;</span> <span class="s1">'voip'</span><span class="p">,</span>
  <span class="ss">:pool</span> <span class="o">=&gt;</span> <span class="mi">250</span><span class="p">,</span>
  <span class="ss">:connections</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span>
  <span class="ss">:username</span> <span class="o">=&gt;</span> <span class="s1">'voip'</span><span class="p">,</span>
  <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s1">'PASSWORD'</span><span class="p">,</span>
  <span class="c1">#:socket =&gt; '/var/run/mysqld/mysqld.pid',</span>
  <span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s1">'127.0.0.1'</span><span class="p">,</span>
  <span class="ss">:reconnect</span> <span class="o">=&gt;</span> <span class="kp">true</span>
<span class="p">}</span>

<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">establish_connection</span> <span class="no">DATABASE</span>

<span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">STDERR</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="nf">level</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">::</span><span class="no">DEBUG</span>

<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">logger</span> <span class="o">=</span> <span class="n">logger</span>
<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">.</span><span class="nf">colorize_logging</span> <span class="o">=</span> <span class="kp">true</span>

<span class="c1"># create AR classes and DB tables</span>
<span class="k">class</span> <span class="nc">VoteQuestion</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">set_primary_key</span> <span class="ss">:question_number</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Questionnaire</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">;</span> <span class="k">end</span>

<span class="c1"># create DB tables if not exists (dirty way!)</span>
<span class="k">if</span> <span class="o">!</span> <span class="no">VoteQuestion</span><span class="p">.</span><span class="nf">table_exists?</span>
  <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
    <span class="n">create_table</span> <span class="ss">:questionnairies</span> <span class="k">do</span> <span class="o">|</span><span class="n">table</span><span class="o">|</span>
      <span class="n">table</span><span class="p">.</span><span class="nf">string</span> <span class="ss">:pin_code</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">8</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1">#(1..10).each do |pin_code|</span>
  <span class="no">File</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="no">APP_ROOT</span><span class="si">}</span><span class="s2">/codes.txt"</span><span class="p">).</span><span class="nf">chomp</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">).</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pin_code</span><span class="o">|</span>
    <span class="no">Questionnaire</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span> <span class="ss">:pin_code</span> <span class="o">=&gt;</span> <span class="s2">"00000000</span><span class="si">#{</span><span class="n">pin_code</span><span class="p">.</span><span class="nf">chomp</span><span class="si">}</span><span class="s2">"</span><span class="p">[</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span> <span class="p">)</span>
  <span class="k">end</span>

  <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
    <span class="n">create_table</span> <span class="ss">:phone_numbers</span> <span class="k">do</span> <span class="o">|</span><span class="n">table</span><span class="o">|</span>
      <span class="n">table</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:questionnaire_id</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
      <span class="n">table</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:number</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">8</span><span class="p">,</span> <span class="ss">:unsigned</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span>
      <span class="n">table</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:question_number</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="mi">0</span>
      <span class="n">table</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:count_of_calls_made</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="mi">0</span>
      <span class="n">table</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:amount_of_asked_questions</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="mi">0</span>
      <span class="n">table</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:amount_of_correct_answers</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="mi">0</span>
      <span class="n">table</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:total_amount_of_asked_questions</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="mi">0</span>
      <span class="n">table</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:total_amount_of_correct_answers</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="mi">0</span>
      <span class="n">table</span><span class="p">.</span><span class="nf">boolean</span> <span class="ss">:sms_sent</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="kp">false</span>
      <span class="n">table</span><span class="p">.</span><span class="nf">timestamps</span>
    <span class="k">end</span>
    <span class="n">add_index</span> <span class="ss">:phone_numbers</span><span class="p">,</span> <span class="ss">:number</span>
  <span class="k">end</span>

  <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="p">.</span><span class="nf">define</span> <span class="k">do</span>
    <span class="n">create_table</span> <span class="ss">:vote_questions</span><span class="p">,</span> <span class="ss">:primary_key</span> <span class="o">=&gt;</span> <span class="ss">:question_number</span> <span class="k">do</span> <span class="o">|</span><span class="n">table</span><span class="o">|</span>
      <span class="n">table</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:amount_of_answers</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="mi">3</span>
      <span class="n">table</span><span class="p">.</span><span class="nf">integer</span> <span class="ss">:correct_answer</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">10</span><span class="p">).</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">question_no</span><span class="o">|</span>
    <span class="no">VoteQuestion</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
      <span class="ss">:question_number</span> <span class="o">=&gt;</span> <span class="n">question_no</span><span class="p">,</span>
      <span class="ss">:amount_of_answers</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span>
      <span class="ss">:correct_answer</span> <span class="o">=&gt;</span> <span class="no">CORRECT_ANSWERS</span><span class="p">[</span><span class="n">question_no</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">to_i</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">PhoneNumber</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates_uniqueness_of</span> <span class="ss">:number</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">CallAttempt</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:phone_number</span>
<span class="k">end</span>

<span class="c1"># AGI classes</span>
<span class="k">class</span> <span class="nc">Farmacy</span> <span class="o">&lt;</span> <span class="no">AGIRoute</span>

  <span class="c1"># this method will be called from asteris dialplan (AGI calling) for every new inbound phone call</span>
  <span class="k">def</span> <span class="nf">vote</span>
    <span class="k">begin</span>
      <span class="n">agi</span><span class="p">.</span><span class="nf">answer</span>

      <span class="no">AGIMenu</span><span class="p">.</span><span class="nf">sounds_dir</span> <span class="o">=</span> <span class="no">AGISelection</span><span class="p">.</span><span class="nf">sounds_dir</span> <span class="o">=</span> <span class="no">APP_ROOT</span> <span class="o">+</span> <span class="s1">'/'</span>

      <span class="c1"># prepare the IVR menu</span>
      <span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:introduction</span><span class="o">=&gt;</span><span class="p">[</span><span class="s2">"welcome"</span><span class="p">,</span> <span class="s2">"instructions"</span><span class="p">],</span>
        <span class="ss">:conclusion</span><span class="o">=&gt;</span><span class="s2">"what-is-your-choice"</span><span class="p">,</span>
        <span class="ss">:timeout</span><span class="o">=&gt;</span><span class="mi">17</span><span class="p">,</span>
        <span class="ss">:choices</span><span class="o">=&gt;</span>
        <span class="p">[{</span><span class="ss">:dtmf</span><span class="o">=&gt;</span><span class="s2">"*"</span><span class="p">,</span> <span class="ss">:audio</span><span class="o">=&gt;</span><span class="p">[</span><span class="s2">"to-go-back"</span><span class="p">,</span> <span class="s2">"press"</span><span class="p">,</span> <span class="s2">"digits/star"</span><span class="p">]},</span>
          <span class="p">{</span><span class="ss">:dtmf</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:audio</span><span class="o">=&gt;</span><span class="p">[</span><span class="s2">"press"</span><span class="p">,</span> <span class="s2">"digits/1"</span><span class="p">,</span> <span class="s2">"for-option-1"</span><span class="p">]},</span>
          <span class="p">{</span><span class="ss">:dtmf</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">,</span> <span class="ss">:audio</span><span class="o">=&gt;</span><span class="p">[</span><span class="s2">"press"</span><span class="p">,</span> <span class="s2">"digits/2"</span><span class="p">,</span> <span class="s2">"for-option-2"</span><span class="p">]},</span>
          <span class="p">{</span><span class="ss">:dtmf</span><span class="o">=&gt;</span><span class="s2">"#"</span><span class="p">,</span> <span class="ss">:audio</span><span class="o">=&gt;</span><span class="p">[</span><span class="s2">"or"</span><span class="p">,</span> <span class="s2">"press"</span><span class="p">,</span> <span class="s2">"digits/pound"</span><span class="p">,</span> <span class="s2">"to-repeat"</span><span class="p">]}]}</span>

      <span class="c1"># fix callerid and locate caller</span>
      <span class="n">e164</span> <span class="o">=</span> <span class="n">agi</span><span class="p">.</span><span class="nf">channel_params</span><span class="p">[</span><span class="s1">'callerid'</span><span class="p">].</span><span class="nf">to_i</span>
      <span class="n">number</span> <span class="o">=</span> <span class="no">PhoneNumber</span><span class="p">.</span><span class="nf">find_by_number</span><span class="p">(</span><span class="n">e164</span><span class="p">)</span>

      <span class="c1"># increase calls counter for existiing in DB phone number</span>
      <span class="k">unless</span> <span class="n">number</span><span class="p">.</span><span class="nf">nil?</span>
        <span class="n">number</span><span class="p">.</span><span class="nf">count_of_calls_made</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">number</span><span class="p">.</span><span class="nf">save</span>
      <span class="k">end</span>
      <span class="c1"># create a new DB record for non-existing in DB phone number</span>
      <span class="n">phone_number</span> <span class="o">=</span> <span class="k">if</span> <span class="n">number</span><span class="p">.</span><span class="nf">nil?</span>
        <span class="n">pn</span> <span class="o">=</span> <span class="no">PhoneNumber</span><span class="p">.</span><span class="nf">create</span> <span class="ss">:number</span> <span class="o">=&gt;</span> <span class="n">e164</span><span class="p">,</span> <span class="ss">:count_of_calls_made</span> <span class="o">=&gt;</span> <span class="mi">1</span>

        <span class="c1"># say 'welcome' or 'welcome back' &amp; save state of caller</span>
        <span class="n">pn</span><span class="p">.</span><span class="nf">questionnaire_id</span> <span class="o">=</span> <span class="n">hello_new_caller</span><span class="p">()</span>
        <span class="n">pn</span><span class="p">.</span><span class="nf">save</span>
        <span class="n">pn</span>

      <span class="c1"># if caller is not assigned to the specific Questionnaire, ...</span>
      <span class="k">elsif</span> <span class="n">number</span><span class="p">.</span><span class="nf">questionnaire_id</span><span class="p">.</span><span class="nf">nil?</span>
        <span class="c1"># say 'welcome' or 'welcome back' &amp; save state of caller</span>
        <span class="n">number</span><span class="p">.</span><span class="nf">questionnaire_id</span> <span class="o">=</span> <span class="n">hello_new_caller</span><span class="p">()</span>
        <span class="n">number</span><span class="p">.</span><span class="nf">save</span>
        <span class="n">number</span>


      <span class="k">else</span>
        <span class="n">welcome_back</span> <span class="n">number</span><span class="p">.</span><span class="nf">question_number</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">?</span> <span class="s1">'Hello_repeat_nopin'</span> <span class="p">:</span> <span class="s1">'Hello_repeat'</span>
        <span class="n">number</span>
      <span class="k">end</span>

      <span class="n">agi</span><span class="p">.</span><span class="nf">exec</span> <span class="s1">'Playback silence/1'</span>
      <span class="n">ask_question</span> <span class="ss">:phone_number</span> <span class="o">=&gt;</span> <span class="n">phone_number</span>
      <span class="n">thanks!</span> <span class="ss">:phone_number</span> <span class="o">=&gt;</span> <span class="n">phone_number</span>

    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">err</span>
      <span class="nb">puts</span> <span class="s2">"&gt;&gt;&gt;&gt;&gt;&gt; ERROR: "</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="nf">backtrace</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">play_ivr</span><span class="p">(</span><span class="n">ivr</span><span class="p">)</span>
    <span class="k">begin</span>
      <span class="n">menu</span> <span class="o">=</span> <span class="no">AGIMenu</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">ivr</span><span class="p">)</span>
      <span class="n">result</span> <span class="o">=</span> <span class="n">menu</span><span class="p">.</span><span class="nf">play</span><span class="p">(</span><span class="ss">:agi</span> <span class="o">=&gt;</span> <span class="n">agi</span><span class="p">)</span>
      <span class="n">result</span>
    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">err</span>
      <span class="nb">puts</span> <span class="s2">"&gt;&gt;&gt;&gt;&gt;&gt; ERROR: "</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="nf">backtrace</span>
      <span class="kp">nil</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">playback</span><span class="p">(</span><span class="n">audio</span><span class="p">,</span> <span class="n">timeout</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">)</span>
    <span class="n">play_ivr</span> <span class="ss">:timeout</span> <span class="o">=&gt;</span> <span class="n">timeout</span><span class="p">,</span> <span class="ss">:introduction</span> <span class="o">=&gt;</span> <span class="n">audio</span><span class="p">,</span>
      <span class="ss">:choices</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="p">{</span><span class="ss">:dtmf</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="ss">:dtmf</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="ss">:dtmf</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">},</span>
        <span class="p">{</span><span class="ss">:dtmf</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">},</span> <span class="p">{</span><span class="ss">:dtmf</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="ss">:dtmf</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">},</span>
        <span class="p">{</span><span class="ss">:dtmf</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">},</span> <span class="p">{</span><span class="ss">:dtmf</span> <span class="o">=&gt;</span> <span class="mi">8</span><span class="p">},</span> <span class="p">{</span><span class="ss">:dtmf</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">},</span>
        <span class="p">{</span><span class="ss">:dtmf</span><span class="o">=&gt;</span><span class="s1">'*'</span><span class="p">},</span> <span class="p">{</span><span class="ss">:dtmf</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="ss">:dtmf</span><span class="o">=&gt;</span><span class="s1">'#'</span><span class="p">}</span> <span class="p">]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">press_one_to_confirm</span><span class="p">(</span><span class="n">return_value</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
    <span class="n">code</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="nf">upto</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">count</span><span class="o">|</span>
      <span class="n">selection</span> <span class="o">=</span>  <span class="n">playback</span><span class="p">(</span><span class="s1">'Wright'</span><span class="p">,</span> <span class="mi">3</span><span class="p">).</span><span class="nf">to_s</span>
      <span class="k">break</span> <span class="n">return_value</span> <span class="k">if</span> <span class="n">selection</span><span class="p">.</span><span class="nf">to_s</span> <span class="o">==</span> <span class="s1">'1'</span>
      <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">3</span> <span class="k">then</span>
        <span class="n">agi</span><span class="p">.</span><span class="nf">exec</span> <span class="s2">"Busy 12"</span>
        <span class="n">agi</span><span class="p">.</span><span class="nf">exec</span> <span class="s2">"Hangup"</span>
        <span class="k">break</span> <span class="kp">nil</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">hello_new_caller</span>
    <span class="k">begin</span>
      <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="nf">upto</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">count</span><span class="o">|</span>
        <span class="n">selection</span> <span class="o">=</span> <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">then</span>
          <span class="no">AGISelection</span><span class="p">.</span><span class="nf">new</span> <span class="ss">:audio</span> <span class="o">=&gt;</span> <span class="s1">'Hello'</span><span class="p">,</span> <span class="ss">:max_digits</span> <span class="o">=&gt;</span> <span class="mi">8</span>
        <span class="k">else</span>
          <span class="no">AGISelection</span><span class="p">.</span><span class="nf">new</span> <span class="ss">:audio</span> <span class="o">=&gt;</span> <span class="s1">'Wrong'</span><span class="p">,</span> <span class="ss">:max_digits</span> <span class="o">=&gt;</span> <span class="mi">8</span>
        <span class="k">end</span>
        <span class="n">code</span> <span class="o">=</span> <span class="n">selection</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="ss">:agi</span> <span class="o">=&gt;</span> <span class="n">agi</span><span class="p">)</span>
        <span class="n">questionnaire</span> <span class="o">=</span> <span class="no">Questionnaire</span><span class="p">.</span><span class="nf">find_by_pin_code</span><span class="p">(</span><span class="n">code</span><span class="p">.</span><span class="nf">to_s</span><span class="p">)</span>
        <span class="k">break</span> <span class="n">questionnaire</span> <span class="k">unless</span> <span class="n">questionnaire</span><span class="p">.</span><span class="nf">nil?</span>
      <span class="k">end</span>
      <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="nf">class</span> <span class="o">==</span> <span class="no">Questionnaire</span>
        <span class="n">press_one_to_confirm</span> <span class="n">result</span><span class="p">.</span><span class="nf">id</span>
      <span class="k">else</span>
        <span class="n">agi</span><span class="p">.</span><span class="nf">exec</span> <span class="s2">"Busy 12"</span>
        <span class="n">agi</span><span class="p">.</span><span class="nf">exec</span> <span class="s2">"Hangup"</span>
        <span class="kp">nil</span>
      <span class="k">end</span>
    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">err</span>
      <span class="nb">puts</span> <span class="s2">"&gt;&gt;&gt;&gt;&gt;&gt; ERROR: "</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="nf">backtrace</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">welcome_back</span><span class="p">(</span><span class="n">message</span><span class="o">=</span><span class="s1">'Hello_repeat'</span><span class="p">)</span>
    <span class="n">playback</span> <span class="n">message</span>
    <span class="n">press_one_to_confirm</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">ask_question</span><span class="p">(</span><span class="n">params</span><span class="o">=</span><span class="p">{})</span>
    <span class="k">begin</span>
      <span class="n">phone_number</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:phone_number</span><span class="p">]</span>
      <span class="n">question_number</span> <span class="o">=</span> <span class="n">phone_number</span><span class="p">.</span><span class="nf">question_number</span> <span class="o">+</span> <span class="mi">1</span>
      <span class="n">question_data</span> <span class="o">=</span>  <span class="no">VoteQuestion</span><span class="p">.</span><span class="nf">find_by_question_number</span><span class="p">(</span><span class="n">question_number</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">question_data</span><span class="p">.</span><span class="nf">nil?</span> <span class="k">then</span> <span class="c1"># finalize work - no more questions</span>
        <span class="k">return</span>
      <span class="k">end</span>
      <span class="n">ivr_data</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:introduction</span> <span class="o">=&gt;</span> <span class="n">question_number</span><span class="p">,</span> <span class="ss">:choices</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="p">],</span> <span class="ss">:timeout</span> <span class="o">=&gt;</span> <span class="mi">12</span> <span class="p">}</span>
      <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="p">(</span><span class="n">question_data</span><span class="p">.</span><span class="nf">amount_of_answers</span><span class="p">)).</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">possible_answer</span><span class="o">|</span>
        <span class="n">ivr_data</span><span class="p">[</span><span class="ss">:choices</span><span class="p">].</span><span class="nf">push</span><span class="p">({</span>
          <span class="ss">:dtmf</span> <span class="o">=&gt;</span> <span class="n">possible_answer</span><span class="p">,</span>
          <span class="ss">:audio</span> <span class="o">=&gt;</span> <span class="s2">"</span><span class="si">#{</span><span class="n">question_number</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">possible_answer</span><span class="si">}</span><span class="s2">"</span>
        <span class="p">})</span>
      <span class="k">end</span>
      <span class="n">ivr_result</span> <span class="o">=</span> <span class="n">play_ivr</span> <span class="n">ivr_data</span>
      <span class="n">phone_number</span><span class="p">.</span><span class="nf">question_number</span> <span class="o">=</span> <span class="n">question_number</span>
      <span class="n">phone_number</span><span class="p">.</span><span class="nf">amount_of_asked_questions</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="n">phone_number</span><span class="p">.</span><span class="nf">total_amount_of_asked_questions</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="k">if</span> <span class="n">question_data</span><span class="p">.</span><span class="nf">correct_answer</span> <span class="o">==</span> <span class="n">ivr_result</span><span class="p">.</span><span class="nf">to_i</span>
        <span class="n">phone_number</span><span class="p">.</span><span class="nf">amount_of_correct_answers</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">phone_number</span><span class="p">.</span><span class="nf">total_amount_of_correct_answers</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="k">end</span>

      <span class="n">phone_number</span><span class="p">.</span><span class="nf">save</span>
      <span class="n">ask_question</span> <span class="ss">:phone_number</span> <span class="o">=&gt;</span> <span class="n">phone_number</span>
    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">err</span>
      <span class="nb">puts</span> <span class="n">err</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="nf">backtrace</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">thanks!</span><span class="p">(</span><span class="n">params</span><span class="o">=</span><span class="p">{})</span>
    <span class="n">phone_number</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:phone_number</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">phone_number</span><span class="p">.</span><span class="nf">amount_of_correct_answers</span> <span class="o">==</span> <span class="no">VoteQuestion</span><span class="p">.</span><span class="nf">count</span> <span class="k">then</span>
      <span class="n">playback</span> <span class="s1">'Goodbye'</span>
    <span class="k">else</span>
      <span class="n">phone_number</span><span class="p">.</span><span class="nf">question_number</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="n">phone_number</span><span class="p">.</span><span class="nf">amount_of_asked_questions</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="n">phone_number</span><span class="p">.</span><span class="nf">amount_of_correct_answers</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="n">phone_number</span><span class="p">.</span><span class="nf">save</span>
      <span class="n">playback</span> <span class="s1">'Goodbye_wrong'</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">trap</span><span class="p">(</span><span class="s1">'INT'</span><span class="p">)</span>   <span class="p">{</span> <span class="no">AGIServer</span><span class="p">.</span><span class="nf">shutdown</span> <span class="p">}</span>
<span class="nb">trap</span><span class="p">(</span><span class="s1">'TERM'</span><span class="p">)</span>   <span class="p">{</span> <span class="no">AGIServer</span><span class="p">.</span><span class="nf">shutdown</span> <span class="p">}</span>

<span class="k">begin</span>
  <span class="n">config</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:bind_port</span> <span class="o">=&gt;</span> <span class="mi">4574</span><span class="p">,</span>
    <span class="ss">:min_workers</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span>
    <span class="ss">:max_workers</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">,</span>
    <span class="ss">:jobs_per_worker</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span>
    <span class="ss">:stats</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
    <span class="ss">:bind_host</span> <span class="o">=&gt;</span> <span class="s1">'127.0.0.1'</span><span class="p">,</span>
    <span class="ss">:logger</span> <span class="o">=&gt;</span> <span class="n">logger</span>
  <span class="p">}</span>
  <span class="no">AgiServer</span> <span class="o">=</span> <span class="no">AGIServer</span><span class="p">.</span><span class="nf">new</span> <span class="n">config</span>
<span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">EADDRINUSE</span>
  <span class="n">error</span> <span class="o">=</span> <span class="s2">"Cannot start AGI Server, address already in use."</span>
  <span class="n">logger</span><span class="p">.</span><span class="nf">fatal</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
  <span class="nb">print</span> <span class="s2">"</span><span class="si">#{</span><span class="n">error</span><span class="si">}</span><span class="se">\n</span><span class="s2">"</span>
  <span class="nb">exit</span>
<span class="k">else</span>
  <span class="nb">print</span> <span class="s2">"</span><span class="si">#{</span><span class="vg">$$</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>

<span class="no">AgiServer</span><span class="p">.</span><span class="nf">start</span>
<span class="no">AgiServer</span><span class="p">.</span><span class="nf">finish</span>
</code></pre></div></div>

<p>Good luck!</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/02/questionnaire-with-asterisk-pbx-agi-ruby.html</guid>
                <description>
                    
                    The Questionnaire application, based on the AsteriskRuby gem, is a production-ready system that was developed a while ago for a small project. Now, I want to share it with the VoIP community. The application provides caller authentication, prompts for a PIN code, and continues from the last unanswered question for returning callers, storing answers and call records in the database.
                    
                </description>
                <pubDate>Tue, 12 Feb 2013 22:29:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Telephony system for remote locations</title>
                <link>//andrius.mobi/2013/02/telephony-system-for-remote-locations.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>Are you living far away from your home country or working remotely? Do you travel frequently or have a presence in another country? If so, you may need a telecommunication system that keeps you connected to the world.</p>

<h2 id="target-users">Target users</h2>

<ul>
  <li>Remote workers</li>
  <li>Travelers and tourists</li>
  <li>Digital nomads</li>
  <li>Expats, migrants, and students</li>
  <li>International businesses or businesses with multiple branches</li>
  <li>Transport and logistics companies</li>
  <li>Travel agencies</li>
  <li>…and more!</li>
</ul>

<p><strong>These users often seek for:</strong></p>

<ul>
  <li>A local SIM card for making local calls and browsing the internet;</li>
  <li>A solution for receiving calls on their old (home) phone number without paying high roaming fees;</li>
  <li>A low-cost roaming solution;</li>
  <li>A virtual presence with a local phone number in a remote location;</li>
  <li>Low-cost calls.</li>
</ul>

<h2 id="solution">Solution</h2>

<p>So how can this be achieved?</p>

<p>To create a phone system with low-cost or zero-cost calls between two locations, you need the following components:</p>

<ul>
  <li>VoIP server: a hosted PBX or a small server with Linux and Asterisk PBX onboard. This can be an old computer, Raspberry Pi, OpenWRT router, or VPS server;</li>
  <li>Prepaid SIM card in the current location;</li>
  <li>
    <p>DID phone number in the home (or remote for virtual presence) location. DID is a phone number you can get from a VoIP carrier and forward it to your phone system.</p>

    <p>Alternatively, you can use an FXO/VoIP box to connect your home phone line or a Raspberry Pi with a GSM USB stick or GSM gateway, utilizing your old SIM card.</p>
  </li>
</ul>

<p>Set up call diversion from your home SIM card mobile to the DID number (or keep your SIM card within the GSM gateway).</p>

<p>Configure a SIP account on your softphone and point it to the VoIP server.</p>

<p>Update the dialplan and start receiving calls effortlessly.</p>

<p>Of course, calls work in both directions! In case there is no internet coverage, calls can be sent to the cellphone through a VoIP trunk (and you may have to pay some fee for that, but it’s likely still cheaper than paying roaming fees).</p>

<p>I have been using this method for years and am currently working on a roaming PBX solution that automates various use cases.</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/02/telephony-system-for-remote-locations.html</guid>
                <description>
                    
                    How to build a telecommunication system to keep you connected globally while maintaining a good price/quality/flexibility balance. The components include a VoIP server, prepaid SIM card, and DID phone number for low-cost or zero-cost calls.
                    
                </description>
                <pubDate>Tue, 05 Feb 2013 22:00:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
        
            <item>
                <title>Asterisk AGI sample in bash</title>
                <link>//andrius.mobi/2013/02/asterisk-agi-sample-in-bash.html</link>
                <content:encoded>
                    <![CDATA[
                    <p>Asterisk AGI sample in bash, which is very interesting. Bash is a great alternative in situations where external scripts need to be executed to implement functionality that Asterisk cannot do. Another option is using <a href="https://wiki.asterisk.org/wiki/display/AST/Lua+Dialplan+Configuration">Lua dialplan</a>. Personally, I use Ruby for the same purpose, either with [Adhearsion](http://adhearsion.com or <a href="https://rubygems.org/gems/AsteriskRuby">AsteriskRuby</a>.</p>

<p>Anyway, here is the AGI script. It is very basic, but fully functional:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash </span>
<span class="nb">declare</span> <span class="nt">-a</span> array 
<span class="k">while </span><span class="nb">read</span> <span class="nt">-e</span> ARG <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$ARG</span><span class="s2">"</span> <span class="o">]</span> <span class="p">;</span> <span class="k">do 
        </span><span class="nv">array</span><span class="o">=(</span><span class="sb">`</span> <span class="nb">echo</span> <span class="nv">$ARG</span> | <span class="nb">sed</span> <span class="nt">-e</span> <span class="s1">'s/://'</span><span class="sb">`</span><span class="o">)</span> 
        <span class="nb">export</span> <span class="k">${</span><span class="nv">array</span><span class="p">[0]</span><span class="k">}</span><span class="o">=</span><span class="k">${</span><span class="nv">array</span><span class="p">[1]</span><span class="k">}</span> 
<span class="k">done</span> 

<span class="c"># following variables are available from asterisk </span>
<span class="nb">echo</span> <span class="nv">$agi_request</span> <span class="o">&gt;</span>&amp;2 
<span class="nb">echo</span> <span class="nv">$agi_channel</span> <span class="o">&gt;</span>&amp;2 
<span class="nb">echo</span> <span class="nv">$agi_language</span> <span class="o">&gt;</span>&amp;2 
<span class="nb">echo</span> <span class="nv">$agi_type</span> <span class="o">&gt;</span>&amp;2 
<span class="nb">echo</span> <span class="nv">$agi_uniqueid</span> <span class="o">&gt;</span>&amp;2 
<span class="nb">echo</span> <span class="nv">$agi_callerid</span> <span class="o">&gt;</span>&amp;2 
<span class="nb">echo</span> <span class="nv">$agi_dnid</span> <span class="o">&gt;</span>&amp;2 
<span class="nb">echo</span> <span class="nv">$agi_rdnis</span> <span class="o">&gt;</span>&amp;2 
<span class="nb">echo</span> <span class="nv">$agi_context</span> <span class="o">&gt;</span>&amp;2 
<span class="nb">echo</span> <span class="nv">$agi_extension</span> <span class="o">&gt;</span>&amp;2 
<span class="nb">echo</span> <span class="nv">$agi_priority</span> <span class="o">&gt;</span>&amp;2 
<span class="nb">echo</span> <span class="nv">$agi_enhanced</span> <span class="o">&gt;</span>&amp;2 

checkresults<span class="o">()</span> <span class="o">{</span> 
        <span class="k">while </span><span class="nb">read </span>line 
        <span class="k">do 
        case</span> <span class="k">${</span><span class="nv">line</span>:0:4<span class="k">}</span> <span class="k">in</span> 
        <span class="s2">"200 "</span> <span class="p">)</span> <span class="nb">echo</span> <span class="nv">$line</span> <span class="o">&gt;</span>&amp;2 
                 <span class="k">return</span><span class="p">;;</span> 
        <span class="s2">"510 "</span> <span class="p">)</span> <span class="nb">echo</span> <span class="nv">$line</span> <span class="o">&gt;</span>&amp;2 
                 <span class="k">return</span><span class="p">;;</span> 
        <span class="s2">"520 "</span> <span class="p">)</span> <span class="nb">echo</span> <span class="nv">$line</span> <span class="o">&gt;</span>&amp;2 
                 <span class="k">return</span><span class="p">;;</span> 
        <span class="k">*</span>      <span class="p">)</span> <span class="nb">echo</span> <span class="nv">$line</span> <span class="o">&gt;</span>&amp;2<span class="p">;;</span> <span class="c">#keep on reading those Invlid command </span>
                                  <span class="c">#command syntax until "520 End ..." </span>
        <span class="k">esac</span> 
        <span class="k">done</span> 
<span class="o">}</span> 

<span class="nv">res</span><span class="o">=</span>&lt;SOME SCRIPT&gt; 

<span class="nb">echo</span> <span class="s2">"1.  Setting Variable 'Test Variable' ..."</span> <span class="o">&gt;</span>&amp;2 
<span class="nb">echo</span> <span class="s2">"SET VARIABLE TestVariable </span><span class="se">\"</span><span class="nv">$res</span><span class="se">\"</span><span class="s2">"</span> 
checkresults 

<span class="nb">echo</span> <span class="s2">"=================== Complete ===================="</span> <span class="o">&gt;</span>&amp;2
</code></pre></div></div>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2013/02/asterisk-agi-sample-in-bash.html</guid>
                <description>
                    
                    The Asterisk PBX AGI sample in Bash is a great option for creating small yet flexible dial plans for embedded devices and more.
                    
                </description>
                <pubDate>Sat, 02 Feb 2013 20:29:00 +0000</pubDate>
                <author>Andrius Kairiukstis</author>
            </item>
        
    
  </channel>
</rss>
